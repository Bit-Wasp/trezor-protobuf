<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.EthereumTxRequest
 */
class EthereumTxRequest extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * data_length optional uint32 = 1
     *
     * @var int
     */
    protected $data_length = null;

    /**
     * signature_v optional uint32 = 2
     *
     * @var int
     */
    protected $signature_v = null;

    /**
     * signature_r optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $signature_r = null;

    /**
     * signature_s optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $signature_s = null;

    /**
     * Check if 'data_length' has a value
     *
     * @return bool
     */
    public function hasDataLength()
    {
        return $this->data_length !== null;
    }

    /**
     * Get 'data_length' value
     *
     * @return int
     */
    public function getDataLength()
    {
        return $this->data_length;
    }

    /**
     * Set 'data_length' value
     *
     * @param int $value
     */
    public function setDataLength($value = null)
    {
        $this->data_length = $value;
    }

    /**
     * Check if 'signature_v' has a value
     *
     * @return bool
     */
    public function hasSignatureV()
    {
        return $this->signature_v !== null;
    }

    /**
     * Get 'signature_v' value
     *
     * @return int
     */
    public function getSignatureV()
    {
        return $this->signature_v;
    }

    /**
     * Set 'signature_v' value
     *
     * @param int $value
     */
    public function setSignatureV($value = null)
    {
        $this->signature_v = $value;
    }

    /**
     * Check if 'signature_r' has a value
     *
     * @return bool
     */
    public function hasSignatureR()
    {
        return $this->signature_r !== null;
    }

    /**
     * Get 'signature_r' value
     *
     * @return \Protobuf\Stream
     */
    public function getSignatureR()
    {
        return $this->signature_r;
    }

    /**
     * Set 'signature_r' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSignatureR($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->signature_r = $value;
    }

    /**
     * Check if 'signature_s' has a value
     *
     * @return bool
     */
    public function hasSignatureS()
    {
        return $this->signature_s !== null;
    }

    /**
     * Get 'signature_s' value
     *
     * @return \Protobuf\Stream
     */
    public function getSignatureS()
    {
        return $this->signature_s;
    }

    /**
     * Set 'signature_s' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSignatureS($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->signature_s = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'data_length' => null,
            'signature_v' => null,
            'signature_r' => null,
            'signature_s' => null
        ], $values);

        $message->setDataLength($values['data_length']);
        $message->setSignatureV($values['signature_v']);
        $message->setSignatureR($values['signature_r']);
        $message->setSignatureS($values['signature_s']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EthereumTxRequest',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'data_length',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'signature_v',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'signature_r',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'signature_s',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->data_length !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->data_length);
        }

        if ($this->signature_v !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->signature_v);
        }

        if ($this->signature_r !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->signature_r);
        }

        if ($this->signature_s !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->signature_s);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->data_length = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->signature_v = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->signature_r = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->signature_s = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->data_length !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->data_length);
        }

        if ($this->signature_v !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->signature_v);
        }

        if ($this->signature_r !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->signature_r);
        }

        if ($this->signature_s !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->signature_s);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->data_length = null;
        $this->signature_v = null;
        $this->signature_r = null;
        $this->signature_s = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\EthereumTxRequest) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->data_length = ($message->data_length !== null) ? $message->data_length : $this->data_length;
        $this->signature_v = ($message->signature_v !== null) ? $message->signature_v : $this->signature_v;
        $this->signature_r = ($message->signature_r !== null) ? $message->signature_r : $this->signature_r;
        $this->signature_s = ($message->signature_s !== null) ? $message->signature_s : $this->signature_s;
    }


}

