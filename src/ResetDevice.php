<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.ResetDevice
 */
class ResetDevice extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * display_random optional bool = 1
     *
     * @var bool
     */
    protected $display_random = null;

    /**
     * strength optional uint32 = 2
     *
     * @var int
     */
    protected $strength = null;

    /**
     * passphrase_protection optional bool = 3
     *
     * @var bool
     */
    protected $passphrase_protection = null;

    /**
     * pin_protection optional bool = 4
     *
     * @var bool
     */
    protected $pin_protection = null;

    /**
     * language optional string = 5
     *
     * @var string
     */
    protected $language = null;

    /**
     * label optional string = 6
     *
     * @var string
     */
    protected $label = null;

    /**
     * u2f_counter optional uint32 = 7
     *
     * @var int
     */
    protected $u2f_counter = null;

    /**
     * skip_backup optional bool = 8
     *
     * @var bool
     */
    protected $skip_backup = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->strength = '256';
        $this->language = 'english';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'display_random' has a value
     *
     * @return bool
     */
    public function hasDisplayRandom()
    {
        return $this->display_random !== null;
    }

    /**
     * Get 'display_random' value
     *
     * @return bool
     */
    public function getDisplayRandom()
    {
        return $this->display_random;
    }

    /**
     * Set 'display_random' value
     *
     * @param bool $value
     */
    public function setDisplayRandom($value = null)
    {
        $this->display_random = $value;
    }

    /**
     * Check if 'strength' has a value
     *
     * @return bool
     */
    public function hasStrength()
    {
        return $this->strength !== null;
    }

    /**
     * Get 'strength' value
     *
     * @return int
     */
    public function getStrength()
    {
        return $this->strength;
    }

    /**
     * Set 'strength' value
     *
     * @param int $value
     */
    public function setStrength($value = null)
    {
        $this->strength = $value;
    }

    /**
     * Check if 'passphrase_protection' has a value
     *
     * @return bool
     */
    public function hasPassphraseProtection()
    {
        return $this->passphrase_protection !== null;
    }

    /**
     * Get 'passphrase_protection' value
     *
     * @return bool
     */
    public function getPassphraseProtection()
    {
        return $this->passphrase_protection;
    }

    /**
     * Set 'passphrase_protection' value
     *
     * @param bool $value
     */
    public function setPassphraseProtection($value = null)
    {
        $this->passphrase_protection = $value;
    }

    /**
     * Check if 'pin_protection' has a value
     *
     * @return bool
     */
    public function hasPinProtection()
    {
        return $this->pin_protection !== null;
    }

    /**
     * Get 'pin_protection' value
     *
     * @return bool
     */
    public function getPinProtection()
    {
        return $this->pin_protection;
    }

    /**
     * Set 'pin_protection' value
     *
     * @param bool $value
     */
    public function setPinProtection($value = null)
    {
        $this->pin_protection = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param string $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * Check if 'label' has a value
     *
     * @return bool
     */
    public function hasLabel()
    {
        return $this->label !== null;
    }

    /**
     * Get 'label' value
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * Set 'label' value
     *
     * @param string $value
     */
    public function setLabel($value = null)
    {
        $this->label = $value;
    }

    /**
     * Check if 'u2f_counter' has a value
     *
     * @return bool
     */
    public function hasU2fCounter()
    {
        return $this->u2f_counter !== null;
    }

    /**
     * Get 'u2f_counter' value
     *
     * @return int
     */
    public function getU2fCounter()
    {
        return $this->u2f_counter;
    }

    /**
     * Set 'u2f_counter' value
     *
     * @param int $value
     */
    public function setU2fCounter($value = null)
    {
        $this->u2f_counter = $value;
    }

    /**
     * Check if 'skip_backup' has a value
     *
     * @return bool
     */
    public function hasSkipBackup()
    {
        return $this->skip_backup !== null;
    }

    /**
     * Get 'skip_backup' value
     *
     * @return bool
     */
    public function getSkipBackup()
    {
        return $this->skip_backup;
    }

    /**
     * Set 'skip_backup' value
     *
     * @param bool $value
     */
    public function setSkipBackup($value = null)
    {
        $this->skip_backup = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'display_random' => null,
            'strength' => '256',
            'passphrase_protection' => null,
            'pin_protection' => null,
            'language' => 'english',
            'label' => null,
            'u2f_counter' => null,
            'skip_backup' => null
        ], $values);

        $message->setDisplayRandom($values['display_random']);
        $message->setStrength($values['strength']);
        $message->setPassphraseProtection($values['passphrase_protection']);
        $message->setPinProtection($values['pin_protection']);
        $message->setLanguage($values['language']);
        $message->setLabel($values['label']);
        $message->setU2fCounter($values['u2f_counter']);
        $message->setSkipBackup($values['skip_backup']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ResetDevice',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'display_random',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'strength',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '256'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'passphrase_protection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'pin_protection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => 'english'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'label',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'u2f_counter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'skip_backup',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->display_random !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->display_random);
        }

        if ($this->strength !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->strength);
        }

        if ($this->passphrase_protection !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->passphrase_protection);
        }

        if ($this->pin_protection !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->pin_protection);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->language);
        }

        if ($this->label !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->label);
        }

        if ($this->u2f_counter !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->u2f_counter);
        }

        if ($this->skip_backup !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->skip_backup);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->display_random = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->strength = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->passphrase_protection = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->pin_protection = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->language = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->label = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->u2f_counter = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->skip_backup = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->display_random !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->strength !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->strength);
        }

        if ($this->passphrase_protection !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->pin_protection !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->language !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->language);
        }

        if ($this->label !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->label);
        }

        if ($this->u2f_counter !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->u2f_counter);
        }

        if ($this->skip_backup !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->display_random = null;
        $this->strength = '256';
        $this->passphrase_protection = null;
        $this->pin_protection = null;
        $this->language = 'english';
        $this->label = null;
        $this->u2f_counter = null;
        $this->skip_backup = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\ResetDevice) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->display_random = ($message->display_random !== null) ? $message->display_random : $this->display_random;
        $this->strength = ($message->strength !== null) ? $message->strength : $this->strength;
        $this->passphrase_protection = ($message->passphrase_protection !== null) ? $message->passphrase_protection : $this->passphrase_protection;
        $this->pin_protection = ($message->pin_protection !== null) ? $message->pin_protection : $this->pin_protection;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
        $this->label = ($message->label !== null) ? $message->label : $this->label;
        $this->u2f_counter = ($message->u2f_counter !== null) ? $message->u2f_counter : $this->u2f_counter;
        $this->skip_backup = ($message->skip_backup !== null) ? $message->skip_backup : $this->skip_backup;
    }


}

