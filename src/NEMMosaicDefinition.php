<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.NEMMosaicDefinition
 */
class NEMMosaicDefinition extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * name optional string = 1
     *
     * @var string
     */
    protected $name = null;

    /**
     * ticker optional string = 2
     *
     * @var string
     */
    protected $ticker = null;

    /**
     * namespace optional string = 3
     *
     * @var string
     */
    protected $namespace = null;

    /**
     * mosaic optional string = 4
     *
     * @var string
     */
    protected $mosaic = null;

    /**
     * divisibility optional uint32 = 5
     *
     * @var int
     */
    protected $divisibility = null;

    /**
     * levy optional enum = 6
     *
     * @var \BitWasp\TrezorProto\NEMMosaicLevy
     */
    protected $levy = null;

    /**
     * fee optional uint64 = 7
     *
     * @var int
     */
    protected $fee = null;

    /**
     * levy_address optional string = 8
     *
     * @var string
     */
    protected $levy_address = null;

    /**
     * levy_namespace optional string = 9
     *
     * @var string
     */
    protected $levy_namespace = null;

    /**
     * levy_mosaic optional string = 10
     *
     * @var string
     */
    protected $levy_mosaic = null;

    /**
     * supply optional uint64 = 11
     *
     * @var int
     */
    protected $supply = null;

    /**
     * mutable_supply optional bool = 12
     *
     * @var bool
     */
    protected $mutable_supply = null;

    /**
     * transferable optional bool = 13
     *
     * @var bool
     */
    protected $transferable = null;

    /**
     * description optional string = 14
     *
     * @var string
     */
    protected $description = null;

    /**
     * networks repeated uint32 = 15
     *
     * @var \Protobuf\Collection
     */
    protected $networks = null;

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'ticker' has a value
     *
     * @return bool
     */
    public function hasTicker()
    {
        return $this->ticker !== null;
    }

    /**
     * Get 'ticker' value
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->ticker;
    }

    /**
     * Set 'ticker' value
     *
     * @param string $value
     */
    public function setTicker($value = null)
    {
        $this->ticker = $value;
    }

    /**
     * Check if 'namespace' has a value
     *
     * @return bool
     */
    public function hasNamespace()
    {
        return $this->namespace !== null;
    }

    /**
     * Get 'namespace' value
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->namespace;
    }

    /**
     * Set 'namespace' value
     *
     * @param string $value
     */
    public function setNamespace($value = null)
    {
        $this->namespace = $value;
    }

    /**
     * Check if 'mosaic' has a value
     *
     * @return bool
     */
    public function hasMosaic()
    {
        return $this->mosaic !== null;
    }

    /**
     * Get 'mosaic' value
     *
     * @return string
     */
    public function getMosaic()
    {
        return $this->mosaic;
    }

    /**
     * Set 'mosaic' value
     *
     * @param string $value
     */
    public function setMosaic($value = null)
    {
        $this->mosaic = $value;
    }

    /**
     * Check if 'divisibility' has a value
     *
     * @return bool
     */
    public function hasDivisibility()
    {
        return $this->divisibility !== null;
    }

    /**
     * Get 'divisibility' value
     *
     * @return int
     */
    public function getDivisibility()
    {
        return $this->divisibility;
    }

    /**
     * Set 'divisibility' value
     *
     * @param int $value
     */
    public function setDivisibility($value = null)
    {
        $this->divisibility = $value;
    }

    /**
     * Check if 'levy' has a value
     *
     * @return bool
     */
    public function hasLevy()
    {
        return $this->levy !== null;
    }

    /**
     * Get 'levy' value
     *
     * @return \BitWasp\TrezorProto\NEMMosaicLevy
     */
    public function getLevy()
    {
        return $this->levy;
    }

    /**
     * Set 'levy' value
     *
     * @param \BitWasp\TrezorProto\NEMMosaicLevy $value
     */
    public function setLevy(\BitWasp\TrezorProto\NEMMosaicLevy $value = null)
    {
        $this->levy = $value;
    }

    /**
     * Check if 'fee' has a value
     *
     * @return bool
     */
    public function hasFee()
    {
        return $this->fee !== null;
    }

    /**
     * Get 'fee' value
     *
     * @return int
     */
    public function getFee()
    {
        return $this->fee;
    }

    /**
     * Set 'fee' value
     *
     * @param int $value
     */
    public function setFee($value = null)
    {
        $this->fee = $value;
    }

    /**
     * Check if 'levy_address' has a value
     *
     * @return bool
     */
    public function hasLevyAddress()
    {
        return $this->levy_address !== null;
    }

    /**
     * Get 'levy_address' value
     *
     * @return string
     */
    public function getLevyAddress()
    {
        return $this->levy_address;
    }

    /**
     * Set 'levy_address' value
     *
     * @param string $value
     */
    public function setLevyAddress($value = null)
    {
        $this->levy_address = $value;
    }

    /**
     * Check if 'levy_namespace' has a value
     *
     * @return bool
     */
    public function hasLevyNamespace()
    {
        return $this->levy_namespace !== null;
    }

    /**
     * Get 'levy_namespace' value
     *
     * @return string
     */
    public function getLevyNamespace()
    {
        return $this->levy_namespace;
    }

    /**
     * Set 'levy_namespace' value
     *
     * @param string $value
     */
    public function setLevyNamespace($value = null)
    {
        $this->levy_namespace = $value;
    }

    /**
     * Check if 'levy_mosaic' has a value
     *
     * @return bool
     */
    public function hasLevyMosaic()
    {
        return $this->levy_mosaic !== null;
    }

    /**
     * Get 'levy_mosaic' value
     *
     * @return string
     */
    public function getLevyMosaic()
    {
        return $this->levy_mosaic;
    }

    /**
     * Set 'levy_mosaic' value
     *
     * @param string $value
     */
    public function setLevyMosaic($value = null)
    {
        $this->levy_mosaic = $value;
    }

    /**
     * Check if 'supply' has a value
     *
     * @return bool
     */
    public function hasSupply()
    {
        return $this->supply !== null;
    }

    /**
     * Get 'supply' value
     *
     * @return int
     */
    public function getSupply()
    {
        return $this->supply;
    }

    /**
     * Set 'supply' value
     *
     * @param int $value
     */
    public function setSupply($value = null)
    {
        $this->supply = $value;
    }

    /**
     * Check if 'mutable_supply' has a value
     *
     * @return bool
     */
    public function hasMutableSupply()
    {
        return $this->mutable_supply !== null;
    }

    /**
     * Get 'mutable_supply' value
     *
     * @return bool
     */
    public function getMutableSupply()
    {
        return $this->mutable_supply;
    }

    /**
     * Set 'mutable_supply' value
     *
     * @param bool $value
     */
    public function setMutableSupply($value = null)
    {
        $this->mutable_supply = $value;
    }

    /**
     * Check if 'transferable' has a value
     *
     * @return bool
     */
    public function hasTransferable()
    {
        return $this->transferable !== null;
    }

    /**
     * Get 'transferable' value
     *
     * @return bool
     */
    public function getTransferable()
    {
        return $this->transferable;
    }

    /**
     * Set 'transferable' value
     *
     * @param bool $value
     */
    public function setTransferable($value = null)
    {
        $this->transferable = $value;
    }

    /**
     * Check if 'description' has a value
     *
     * @return bool
     */
    public function hasDescription()
    {
        return $this->description !== null;
    }

    /**
     * Get 'description' value
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set 'description' value
     *
     * @param string $value
     */
    public function setDescription($value = null)
    {
        $this->description = $value;
    }

    /**
     * Check if 'networks' has a value
     *
     * @return bool
     */
    public function hasNetworksList()
    {
        return $this->networks !== null;
    }

    /**
     * Get 'networks' value
     *
     * @return \Protobuf\Collection
     */
    public function getNetworksList()
    {
        return $this->networks;
    }

    /**
     * Set 'networks' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setNetworksList(\Protobuf\Collection $value = null)
    {
        $this->networks = $value;
    }

    /**
     * Add a new element to 'networks'
     *
     * @param int $value
     */
    public function addNetworks($value)
    {
        if ($this->networks === null) {
            $this->networks = new \Protobuf\ScalarCollection();
        }

        $this->networks->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'name' => null,
            'ticker' => null,
            'namespace' => null,
            'mosaic' => null,
            'divisibility' => null,
            'levy' => null,
            'fee' => null,
            'levy_address' => null,
            'levy_namespace' => null,
            'levy_mosaic' => null,
            'supply' => null,
            'mutable_supply' => null,
            'transferable' => null,
            'description' => null,
            'networks' => []
        ], $values);

        $message->setName($values['name']);
        $message->setTicker($values['ticker']);
        $message->setNamespace($values['namespace']);
        $message->setMosaic($values['mosaic']);
        $message->setDivisibility($values['divisibility']);
        $message->setLevy($values['levy']);
        $message->setFee($values['fee']);
        $message->setLevyAddress($values['levy_address']);
        $message->setLevyNamespace($values['levy_namespace']);
        $message->setLevyMosaic($values['levy_mosaic']);
        $message->setSupply($values['supply']);
        $message->setMutableSupply($values['mutable_supply']);
        $message->setTransferable($values['transferable']);
        $message->setDescription($values['description']);

        foreach ($values['networks'] as $item) {
            $message->addNetworks($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'NEMMosaicDefinition',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'ticker',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'namespace',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'mosaic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'divisibility',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'levy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.BitWasp.TrezorProto.NEMMosaicLevy'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'fee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'levy_address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'levy_namespace',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'levy_mosaic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'supply',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'mutable_supply',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'transferable',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'networks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->name);
        }

        if ($this->ticker !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->ticker);
        }

        if ($this->namespace !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->namespace);
        }

        if ($this->mosaic !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->mosaic);
        }

        if ($this->divisibility !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->divisibility);
        }

        if ($this->levy !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->levy->value());
        }

        if ($this->fee !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->fee);
        }

        if ($this->levy_address !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->levy_address);
        }

        if ($this->levy_namespace !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->levy_namespace);
        }

        if ($this->levy_mosaic !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->levy_mosaic);
        }

        if ($this->supply !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->supply);
        }

        if ($this->mutable_supply !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->mutable_supply);
        }

        if ($this->transferable !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->transferable);
        }

        if ($this->description !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->description);
        }

        if ($this->networks !== null) {
            foreach ($this->networks as $val) {
                $writer->writeVarint($stream, 120);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ticker = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->namespace = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->mosaic = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->divisibility = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->levy = \BitWasp\TrezorProto\NEMMosaicLevy::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->fee = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->levy_address = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->levy_namespace = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->levy_mosaic = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->supply = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->mutable_supply = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->transferable = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->description = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->networks === null) {
                    $this->networks = new \Protobuf\ScalarCollection();
                }

                $this->networks->add($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->ticker !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ticker);
        }

        if ($this->namespace !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->namespace);
        }

        if ($this->mosaic !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->mosaic);
        }

        if ($this->divisibility !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->divisibility);
        }

        if ($this->levy !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->levy->value());
        }

        if ($this->fee !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->fee);
        }

        if ($this->levy_address !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->levy_address);
        }

        if ($this->levy_namespace !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->levy_namespace);
        }

        if ($this->levy_mosaic !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->levy_mosaic);
        }

        if ($this->supply !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->supply);
        }

        if ($this->mutable_supply !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->transferable !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->description);
        }

        if ($this->networks !== null) {
            foreach ($this->networks as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->name = null;
        $this->ticker = null;
        $this->namespace = null;
        $this->mosaic = null;
        $this->divisibility = null;
        $this->levy = null;
        $this->fee = null;
        $this->levy_address = null;
        $this->levy_namespace = null;
        $this->levy_mosaic = null;
        $this->supply = null;
        $this->mutable_supply = null;
        $this->transferable = null;
        $this->description = null;
        $this->networks = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\NEMMosaicDefinition) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->ticker = ($message->ticker !== null) ? $message->ticker : $this->ticker;
        $this->namespace = ($message->namespace !== null) ? $message->namespace : $this->namespace;
        $this->mosaic = ($message->mosaic !== null) ? $message->mosaic : $this->mosaic;
        $this->divisibility = ($message->divisibility !== null) ? $message->divisibility : $this->divisibility;
        $this->levy = ($message->levy !== null) ? $message->levy : $this->levy;
        $this->fee = ($message->fee !== null) ? $message->fee : $this->fee;
        $this->levy_address = ($message->levy_address !== null) ? $message->levy_address : $this->levy_address;
        $this->levy_namespace = ($message->levy_namespace !== null) ? $message->levy_namespace : $this->levy_namespace;
        $this->levy_mosaic = ($message->levy_mosaic !== null) ? $message->levy_mosaic : $this->levy_mosaic;
        $this->supply = ($message->supply !== null) ? $message->supply : $this->supply;
        $this->mutable_supply = ($message->mutable_supply !== null) ? $message->mutable_supply : $this->mutable_supply;
        $this->transferable = ($message->transferable !== null) ? $message->transferable : $this->transferable;
        $this->description = ($message->description !== null) ? $message->description : $this->description;
        $this->networks = ($message->networks !== null) ? $message->networks : $this->networks;
    }


}

