<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf extension : BitWasp.TrezorProto.Extension
 */
class Extension implements \Protobuf\Extension
{

    /**
     * Extension field : wire_in optional bool = 50002
     *
     * @var \Protobuf\Extension
     */
    protected static $wire_in = null;

    /**
     * Extension field : wire_out optional bool = 50003
     *
     * @var \Protobuf\Extension
     */
    protected static $wire_out = null;

    /**
     * Extension field : wire_debug_in optional bool = 50004
     *
     * @var \Protobuf\Extension
     */
    protected static $wire_debug_in = null;

    /**
     * Extension field : wire_debug_out optional bool = 50005
     *
     * @var \Protobuf\Extension
     */
    protected static $wire_debug_out = null;

    /**
     * Extension field : wire_tiny optional bool = 50006
     *
     * @var \Protobuf\Extension
     */
    protected static $wire_tiny = null;

    /**
     * Extension field : wire_bootloader optional bool = 50007
     *
     * @var \Protobuf\Extension
     */
    protected static $wire_bootloader = null;

    /**
     * Register all extensions
     *
     * @param \Protobuf\Extension\ExtensionRegistry
     */
    public static function registerAllExtensions(\Protobuf\Extension\ExtensionRegistry $registry)
    {
        $registry->add(self::wireIn());
        $registry->add(self::wireOut());
        $registry->add(self::wireDebugIn());
        $registry->add(self::wireDebugOut());
        $registry->add(self::wireTiny());
        $registry->add(self::wireBootloader());
    }

    /**
     * Extension field : wire_in
     *
     * @return \Protobuf\Extension
     */
    public static function wireIn()
    {
        if (self::$wire_in !== null) {
            return self::$wire_in;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400016);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$wire_in = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\EnumValueOptions', 'wire_in', 50002, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : wire_out
     *
     * @return \Protobuf\Extension
     */
    public static function wireOut()
    {
        if (self::$wire_out !== null) {
            return self::$wire_out;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400024);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$wire_out = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\EnumValueOptions', 'wire_out', 50003, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : wire_debug_in
     *
     * @return \Protobuf\Extension
     */
    public static function wireDebugIn()
    {
        if (self::$wire_debug_in !== null) {
            return self::$wire_debug_in;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400032);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$wire_debug_in = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\EnumValueOptions', 'wire_debug_in', 50004, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : wire_debug_out
     *
     * @return \Protobuf\Extension
     */
    public static function wireDebugOut()
    {
        if (self::$wire_debug_out !== null) {
            return self::$wire_debug_out;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400040);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$wire_debug_out = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\EnumValueOptions', 'wire_debug_out', 50005, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : wire_tiny
     *
     * @return \Protobuf\Extension
     */
    public static function wireTiny()
    {
        if (self::$wire_tiny !== null) {
            return self::$wire_tiny;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400048);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$wire_tiny = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\EnumValueOptions', 'wire_tiny', 50006, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : wire_bootloader
     *
     * @return \Protobuf\Extension
     */
    public static function wireBootloader()
    {
        if (self::$wire_bootloader !== null) {
            return self::$wire_bootloader;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400056);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$wire_bootloader = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\EnumValueOptions', 'wire_bootloader', 50007, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }


}

