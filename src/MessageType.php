<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf enum : BitWasp.TrezorProto.MessageType
 */
class MessageType extends \Protobuf\Enum
{

    /**
     * MessageType_Initialize = 0
     */
    const MessageType_Initialize_VALUE = 0;

    /**
     * MessageType_Ping = 1
     */
    const MessageType_Ping_VALUE = 1;

    /**
     * MessageType_Success = 2
     */
    const MessageType_Success_VALUE = 2;

    /**
     * MessageType_Failure = 3
     */
    const MessageType_Failure_VALUE = 3;

    /**
     * MessageType_ChangePin = 4
     */
    const MessageType_ChangePin_VALUE = 4;

    /**
     * MessageType_WipeDevice = 5
     */
    const MessageType_WipeDevice_VALUE = 5;

    /**
     * MessageType_FirmwareErase = 6
     */
    const MessageType_FirmwareErase_VALUE = 6;

    /**
     * MessageType_FirmwareUpload = 7
     */
    const MessageType_FirmwareUpload_VALUE = 7;

    /**
     * MessageType_FirmwareRequest = 8
     */
    const MessageType_FirmwareRequest_VALUE = 8;

    /**
     * MessageType_GetEntropy = 9
     */
    const MessageType_GetEntropy_VALUE = 9;

    /**
     * MessageType_Entropy = 10
     */
    const MessageType_Entropy_VALUE = 10;

    /**
     * MessageType_GetPublicKey = 11
     */
    const MessageType_GetPublicKey_VALUE = 11;

    /**
     * MessageType_PublicKey = 12
     */
    const MessageType_PublicKey_VALUE = 12;

    /**
     * MessageType_LoadDevice = 13
     */
    const MessageType_LoadDevice_VALUE = 13;

    /**
     * MessageType_ResetDevice = 14
     */
    const MessageType_ResetDevice_VALUE = 14;

    /**
     * MessageType_SignTx = 15
     */
    const MessageType_SignTx_VALUE = 15;

    /**
     * MessageType_SimpleSignTx = 16
     */
    const MessageType_SimpleSignTx_VALUE = 16;

    /**
     * MessageType_Features = 17
     */
    const MessageType_Features_VALUE = 17;

    /**
     * MessageType_PinMatrixRequest = 18
     */
    const MessageType_PinMatrixRequest_VALUE = 18;

    /**
     * MessageType_PinMatrixAck = 19
     */
    const MessageType_PinMatrixAck_VALUE = 19;

    /**
     * MessageType_Cancel = 20
     */
    const MessageType_Cancel_VALUE = 20;

    /**
     * MessageType_TxRequest = 21
     */
    const MessageType_TxRequest_VALUE = 21;

    /**
     * MessageType_TxAck = 22
     */
    const MessageType_TxAck_VALUE = 22;

    /**
     * MessageType_CipherKeyValue = 23
     */
    const MessageType_CipherKeyValue_VALUE = 23;

    /**
     * MessageType_ClearSession = 24
     */
    const MessageType_ClearSession_VALUE = 24;

    /**
     * MessageType_ApplySettings = 25
     */
    const MessageType_ApplySettings_VALUE = 25;

    /**
     * MessageType_ButtonRequest = 26
     */
    const MessageType_ButtonRequest_VALUE = 26;

    /**
     * MessageType_ButtonAck = 27
     */
    const MessageType_ButtonAck_VALUE = 27;

    /**
     * MessageType_ApplyFlags = 28
     */
    const MessageType_ApplyFlags_VALUE = 28;

    /**
     * MessageType_GetAddress = 29
     */
    const MessageType_GetAddress_VALUE = 29;

    /**
     * MessageType_Address = 30
     */
    const MessageType_Address_VALUE = 30;

    /**
     * MessageType_SelfTest = 32
     */
    const MessageType_SelfTest_VALUE = 32;

    /**
     * MessageType_BackupDevice = 34
     */
    const MessageType_BackupDevice_VALUE = 34;

    /**
     * MessageType_EntropyRequest = 35
     */
    const MessageType_EntropyRequest_VALUE = 35;

    /**
     * MessageType_EntropyAck = 36
     */
    const MessageType_EntropyAck_VALUE = 36;

    /**
     * MessageType_SignMessage = 38
     */
    const MessageType_SignMessage_VALUE = 38;

    /**
     * MessageType_VerifyMessage = 39
     */
    const MessageType_VerifyMessage_VALUE = 39;

    /**
     * MessageType_MessageSignature = 40
     */
    const MessageType_MessageSignature_VALUE = 40;

    /**
     * MessageType_PassphraseRequest = 41
     */
    const MessageType_PassphraseRequest_VALUE = 41;

    /**
     * MessageType_PassphraseAck = 42
     */
    const MessageType_PassphraseAck_VALUE = 42;

    /**
     * MessageType_PassphraseStateRequest = 77
     */
    const MessageType_PassphraseStateRequest_VALUE = 77;

    /**
     * MessageType_PassphraseStateAck = 78
     */
    const MessageType_PassphraseStateAck_VALUE = 78;

    /**
     * MessageType_EstimateTxSize = 43
     */
    const MessageType_EstimateTxSize_VALUE = 43;

    /**
     * MessageType_TxSize = 44
     */
    const MessageType_TxSize_VALUE = 44;

    /**
     * MessageType_RecoveryDevice = 45
     */
    const MessageType_RecoveryDevice_VALUE = 45;

    /**
     * MessageType_WordRequest = 46
     */
    const MessageType_WordRequest_VALUE = 46;

    /**
     * MessageType_WordAck = 47
     */
    const MessageType_WordAck_VALUE = 47;

    /**
     * MessageType_CipheredKeyValue = 48
     */
    const MessageType_CipheredKeyValue_VALUE = 48;

    /**
     * MessageType_EncryptMessage = 49
     */
    const MessageType_EncryptMessage_VALUE = 49;

    /**
     * MessageType_EncryptedMessage = 50
     */
    const MessageType_EncryptedMessage_VALUE = 50;

    /**
     * MessageType_DecryptMessage = 51
     */
    const MessageType_DecryptMessage_VALUE = 51;

    /**
     * MessageType_DecryptedMessage = 52
     */
    const MessageType_DecryptedMessage_VALUE = 52;

    /**
     * MessageType_SignIdentity = 53
     */
    const MessageType_SignIdentity_VALUE = 53;

    /**
     * MessageType_SignedIdentity = 54
     */
    const MessageType_SignedIdentity_VALUE = 54;

    /**
     * MessageType_GetFeatures = 55
     */
    const MessageType_GetFeatures_VALUE = 55;

    /**
     * MessageType_EthereumGetAddress = 56
     */
    const MessageType_EthereumGetAddress_VALUE = 56;

    /**
     * MessageType_EthereumAddress = 57
     */
    const MessageType_EthereumAddress_VALUE = 57;

    /**
     * MessageType_EthereumSignTx = 58
     */
    const MessageType_EthereumSignTx_VALUE = 58;

    /**
     * MessageType_EthereumTxRequest = 59
     */
    const MessageType_EthereumTxRequest_VALUE = 59;

    /**
     * MessageType_EthereumTxAck = 60
     */
    const MessageType_EthereumTxAck_VALUE = 60;

    /**
     * MessageType_GetECDHSessionKey = 61
     */
    const MessageType_GetECDHSessionKey_VALUE = 61;

    /**
     * MessageType_ECDHSessionKey = 62
     */
    const MessageType_ECDHSessionKey_VALUE = 62;

    /**
     * MessageType_SetU2FCounter = 63
     */
    const MessageType_SetU2FCounter_VALUE = 63;

    /**
     * MessageType_EthereumSignMessage = 64
     */
    const MessageType_EthereumSignMessage_VALUE = 64;

    /**
     * MessageType_EthereumVerifyMessage = 65
     */
    const MessageType_EthereumVerifyMessage_VALUE = 65;

    /**
     * MessageType_EthereumMessageSignature = 66
     */
    const MessageType_EthereumMessageSignature_VALUE = 66;

    /**
     * MessageType_NEMGetAddress = 67
     */
    const MessageType_NEMGetAddress_VALUE = 67;

    /**
     * MessageType_NEMAddress = 68
     */
    const MessageType_NEMAddress_VALUE = 68;

    /**
     * MessageType_NEMSignTx = 69
     */
    const MessageType_NEMSignTx_VALUE = 69;

    /**
     * MessageType_NEMSignedTx = 70
     */
    const MessageType_NEMSignedTx_VALUE = 70;

    /**
     * MessageType_CosiCommit = 71
     */
    const MessageType_CosiCommit_VALUE = 71;

    /**
     * MessageType_CosiCommitment = 72
     */
    const MessageType_CosiCommitment_VALUE = 72;

    /**
     * MessageType_CosiSign = 73
     */
    const MessageType_CosiSign_VALUE = 73;

    /**
     * MessageType_CosiSignature = 74
     */
    const MessageType_CosiSignature_VALUE = 74;

    /**
     * MessageType_NEMDecryptMessage = 75
     */
    const MessageType_NEMDecryptMessage_VALUE = 75;

    /**
     * MessageType_NEMDecryptedMessage = 76
     */
    const MessageType_NEMDecryptedMessage_VALUE = 76;

    /**
     * MessageType_DebugLinkDecision = 100
     */
    const MessageType_DebugLinkDecision_VALUE = 100;

    /**
     * MessageType_DebugLinkGetState = 101
     */
    const MessageType_DebugLinkGetState_VALUE = 101;

    /**
     * MessageType_DebugLinkState = 102
     */
    const MessageType_DebugLinkState_VALUE = 102;

    /**
     * MessageType_DebugLinkStop = 103
     */
    const MessageType_DebugLinkStop_VALUE = 103;

    /**
     * MessageType_DebugLinkLog = 104
     */
    const MessageType_DebugLinkLog_VALUE = 104;

    /**
     * MessageType_DebugLinkMemoryRead = 110
     */
    const MessageType_DebugLinkMemoryRead_VALUE = 110;

    /**
     * MessageType_DebugLinkMemory = 111
     */
    const MessageType_DebugLinkMemory_VALUE = 111;

    /**
     * MessageType_DebugLinkMemoryWrite = 112
     */
    const MessageType_DebugLinkMemoryWrite_VALUE = 112;

    /**
     * MessageType_DebugLinkFlashErase = 113
     */
    const MessageType_DebugLinkFlashErase_VALUE = 113;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Initialize = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Ping = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Success = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Failure = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ChangePin = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_WipeDevice = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_FirmwareErase = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_FirmwareUpload = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_FirmwareRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_GetEntropy = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Entropy = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_GetPublicKey = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PublicKey = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_LoadDevice = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ResetDevice = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SignTx = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SimpleSignTx = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Features = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PinMatrixRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PinMatrixAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Cancel = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_TxRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_TxAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_CipherKeyValue = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ClearSession = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ApplySettings = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ButtonRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ButtonAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ApplyFlags = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_GetAddress = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_Address = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SelfTest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_BackupDevice = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EntropyRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EntropyAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SignMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_VerifyMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_MessageSignature = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PassphraseRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PassphraseAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PassphraseStateRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_PassphraseStateAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EstimateTxSize = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_TxSize = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_RecoveryDevice = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_WordRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_WordAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_CipheredKeyValue = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EncryptMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EncryptedMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DecryptMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DecryptedMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SignIdentity = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SignedIdentity = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_GetFeatures = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumGetAddress = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumAddress = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumSignTx = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumTxRequest = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumTxAck = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_GetECDHSessionKey = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_ECDHSessionKey = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_SetU2FCounter = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumSignMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumVerifyMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_EthereumMessageSignature = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_NEMGetAddress = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_NEMAddress = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_NEMSignTx = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_NEMSignedTx = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_CosiCommit = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_CosiCommitment = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_CosiSign = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_CosiSignature = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_NEMDecryptMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_NEMDecryptedMessage = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkDecision = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkGetState = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkState = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkStop = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkLog = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkMemoryRead = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkMemory = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkMemoryWrite = null;

    /**
     * @var \BitWasp\TrezorProto\MessageType
     */
    protected static $MessageType_DebugLinkFlashErase = null;

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Initialize()
    {
        if (self::$MessageType_Initialize !== null) {
            return self::$MessageType_Initialize;
        }

        return self::$MessageType_Initialize = new self('MessageType_Initialize', self::MessageType_Initialize_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Ping()
    {
        if (self::$MessageType_Ping !== null) {
            return self::$MessageType_Ping;
        }

        return self::$MessageType_Ping = new self('MessageType_Ping', self::MessageType_Ping_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Success()
    {
        if (self::$MessageType_Success !== null) {
            return self::$MessageType_Success;
        }

        return self::$MessageType_Success = new self('MessageType_Success', self::MessageType_Success_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Failure()
    {
        if (self::$MessageType_Failure !== null) {
            return self::$MessageType_Failure;
        }

        return self::$MessageType_Failure = new self('MessageType_Failure', self::MessageType_Failure_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ChangePin()
    {
        if (self::$MessageType_ChangePin !== null) {
            return self::$MessageType_ChangePin;
        }

        return self::$MessageType_ChangePin = new self('MessageType_ChangePin', self::MessageType_ChangePin_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_WipeDevice()
    {
        if (self::$MessageType_WipeDevice !== null) {
            return self::$MessageType_WipeDevice;
        }

        return self::$MessageType_WipeDevice = new self('MessageType_WipeDevice', self::MessageType_WipeDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_FirmwareErase()
    {
        if (self::$MessageType_FirmwareErase !== null) {
            return self::$MessageType_FirmwareErase;
        }

        return self::$MessageType_FirmwareErase = new self('MessageType_FirmwareErase', self::MessageType_FirmwareErase_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_FirmwareUpload()
    {
        if (self::$MessageType_FirmwareUpload !== null) {
            return self::$MessageType_FirmwareUpload;
        }

        return self::$MessageType_FirmwareUpload = new self('MessageType_FirmwareUpload', self::MessageType_FirmwareUpload_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_FirmwareRequest()
    {
        if (self::$MessageType_FirmwareRequest !== null) {
            return self::$MessageType_FirmwareRequest;
        }

        return self::$MessageType_FirmwareRequest = new self('MessageType_FirmwareRequest', self::MessageType_FirmwareRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_GetEntropy()
    {
        if (self::$MessageType_GetEntropy !== null) {
            return self::$MessageType_GetEntropy;
        }

        return self::$MessageType_GetEntropy = new self('MessageType_GetEntropy', self::MessageType_GetEntropy_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Entropy()
    {
        if (self::$MessageType_Entropy !== null) {
            return self::$MessageType_Entropy;
        }

        return self::$MessageType_Entropy = new self('MessageType_Entropy', self::MessageType_Entropy_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_GetPublicKey()
    {
        if (self::$MessageType_GetPublicKey !== null) {
            return self::$MessageType_GetPublicKey;
        }

        return self::$MessageType_GetPublicKey = new self('MessageType_GetPublicKey', self::MessageType_GetPublicKey_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PublicKey()
    {
        if (self::$MessageType_PublicKey !== null) {
            return self::$MessageType_PublicKey;
        }

        return self::$MessageType_PublicKey = new self('MessageType_PublicKey', self::MessageType_PublicKey_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_LoadDevice()
    {
        if (self::$MessageType_LoadDevice !== null) {
            return self::$MessageType_LoadDevice;
        }

        return self::$MessageType_LoadDevice = new self('MessageType_LoadDevice', self::MessageType_LoadDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ResetDevice()
    {
        if (self::$MessageType_ResetDevice !== null) {
            return self::$MessageType_ResetDevice;
        }

        return self::$MessageType_ResetDevice = new self('MessageType_ResetDevice', self::MessageType_ResetDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SignTx()
    {
        if (self::$MessageType_SignTx !== null) {
            return self::$MessageType_SignTx;
        }

        return self::$MessageType_SignTx = new self('MessageType_SignTx', self::MessageType_SignTx_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SimpleSignTx()
    {
        if (self::$MessageType_SimpleSignTx !== null) {
            return self::$MessageType_SimpleSignTx;
        }

        return self::$MessageType_SimpleSignTx = new self('MessageType_SimpleSignTx', self::MessageType_SimpleSignTx_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Features()
    {
        if (self::$MessageType_Features !== null) {
            return self::$MessageType_Features;
        }

        return self::$MessageType_Features = new self('MessageType_Features', self::MessageType_Features_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PinMatrixRequest()
    {
        if (self::$MessageType_PinMatrixRequest !== null) {
            return self::$MessageType_PinMatrixRequest;
        }

        return self::$MessageType_PinMatrixRequest = new self('MessageType_PinMatrixRequest', self::MessageType_PinMatrixRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PinMatrixAck()
    {
        if (self::$MessageType_PinMatrixAck !== null) {
            return self::$MessageType_PinMatrixAck;
        }

        return self::$MessageType_PinMatrixAck = new self('MessageType_PinMatrixAck', self::MessageType_PinMatrixAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Cancel()
    {
        if (self::$MessageType_Cancel !== null) {
            return self::$MessageType_Cancel;
        }

        return self::$MessageType_Cancel = new self('MessageType_Cancel', self::MessageType_Cancel_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_TxRequest()
    {
        if (self::$MessageType_TxRequest !== null) {
            return self::$MessageType_TxRequest;
        }

        return self::$MessageType_TxRequest = new self('MessageType_TxRequest', self::MessageType_TxRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_TxAck()
    {
        if (self::$MessageType_TxAck !== null) {
            return self::$MessageType_TxAck;
        }

        return self::$MessageType_TxAck = new self('MessageType_TxAck', self::MessageType_TxAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_CipherKeyValue()
    {
        if (self::$MessageType_CipherKeyValue !== null) {
            return self::$MessageType_CipherKeyValue;
        }

        return self::$MessageType_CipherKeyValue = new self('MessageType_CipherKeyValue', self::MessageType_CipherKeyValue_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ClearSession()
    {
        if (self::$MessageType_ClearSession !== null) {
            return self::$MessageType_ClearSession;
        }

        return self::$MessageType_ClearSession = new self('MessageType_ClearSession', self::MessageType_ClearSession_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ApplySettings()
    {
        if (self::$MessageType_ApplySettings !== null) {
            return self::$MessageType_ApplySettings;
        }

        return self::$MessageType_ApplySettings = new self('MessageType_ApplySettings', self::MessageType_ApplySettings_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ButtonRequest()
    {
        if (self::$MessageType_ButtonRequest !== null) {
            return self::$MessageType_ButtonRequest;
        }

        return self::$MessageType_ButtonRequest = new self('MessageType_ButtonRequest', self::MessageType_ButtonRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ButtonAck()
    {
        if (self::$MessageType_ButtonAck !== null) {
            return self::$MessageType_ButtonAck;
        }

        return self::$MessageType_ButtonAck = new self('MessageType_ButtonAck', self::MessageType_ButtonAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ApplyFlags()
    {
        if (self::$MessageType_ApplyFlags !== null) {
            return self::$MessageType_ApplyFlags;
        }

        return self::$MessageType_ApplyFlags = new self('MessageType_ApplyFlags', self::MessageType_ApplyFlags_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_GetAddress()
    {
        if (self::$MessageType_GetAddress !== null) {
            return self::$MessageType_GetAddress;
        }

        return self::$MessageType_GetAddress = new self('MessageType_GetAddress', self::MessageType_GetAddress_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_Address()
    {
        if (self::$MessageType_Address !== null) {
            return self::$MessageType_Address;
        }

        return self::$MessageType_Address = new self('MessageType_Address', self::MessageType_Address_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SelfTest()
    {
        if (self::$MessageType_SelfTest !== null) {
            return self::$MessageType_SelfTest;
        }

        return self::$MessageType_SelfTest = new self('MessageType_SelfTest', self::MessageType_SelfTest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_BackupDevice()
    {
        if (self::$MessageType_BackupDevice !== null) {
            return self::$MessageType_BackupDevice;
        }

        return self::$MessageType_BackupDevice = new self('MessageType_BackupDevice', self::MessageType_BackupDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EntropyRequest()
    {
        if (self::$MessageType_EntropyRequest !== null) {
            return self::$MessageType_EntropyRequest;
        }

        return self::$MessageType_EntropyRequest = new self('MessageType_EntropyRequest', self::MessageType_EntropyRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EntropyAck()
    {
        if (self::$MessageType_EntropyAck !== null) {
            return self::$MessageType_EntropyAck;
        }

        return self::$MessageType_EntropyAck = new self('MessageType_EntropyAck', self::MessageType_EntropyAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SignMessage()
    {
        if (self::$MessageType_SignMessage !== null) {
            return self::$MessageType_SignMessage;
        }

        return self::$MessageType_SignMessage = new self('MessageType_SignMessage', self::MessageType_SignMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_VerifyMessage()
    {
        if (self::$MessageType_VerifyMessage !== null) {
            return self::$MessageType_VerifyMessage;
        }

        return self::$MessageType_VerifyMessage = new self('MessageType_VerifyMessage', self::MessageType_VerifyMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_MessageSignature()
    {
        if (self::$MessageType_MessageSignature !== null) {
            return self::$MessageType_MessageSignature;
        }

        return self::$MessageType_MessageSignature = new self('MessageType_MessageSignature', self::MessageType_MessageSignature_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PassphraseRequest()
    {
        if (self::$MessageType_PassphraseRequest !== null) {
            return self::$MessageType_PassphraseRequest;
        }

        return self::$MessageType_PassphraseRequest = new self('MessageType_PassphraseRequest', self::MessageType_PassphraseRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PassphraseAck()
    {
        if (self::$MessageType_PassphraseAck !== null) {
            return self::$MessageType_PassphraseAck;
        }

        return self::$MessageType_PassphraseAck = new self('MessageType_PassphraseAck', self::MessageType_PassphraseAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PassphraseStateRequest()
    {
        if (self::$MessageType_PassphraseStateRequest !== null) {
            return self::$MessageType_PassphraseStateRequest;
        }

        return self::$MessageType_PassphraseStateRequest = new self('MessageType_PassphraseStateRequest', self::MessageType_PassphraseStateRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_PassphraseStateAck()
    {
        if (self::$MessageType_PassphraseStateAck !== null) {
            return self::$MessageType_PassphraseStateAck;
        }

        return self::$MessageType_PassphraseStateAck = new self('MessageType_PassphraseStateAck', self::MessageType_PassphraseStateAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EstimateTxSize()
    {
        if (self::$MessageType_EstimateTxSize !== null) {
            return self::$MessageType_EstimateTxSize;
        }

        return self::$MessageType_EstimateTxSize = new self('MessageType_EstimateTxSize', self::MessageType_EstimateTxSize_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_TxSize()
    {
        if (self::$MessageType_TxSize !== null) {
            return self::$MessageType_TxSize;
        }

        return self::$MessageType_TxSize = new self('MessageType_TxSize', self::MessageType_TxSize_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_RecoveryDevice()
    {
        if (self::$MessageType_RecoveryDevice !== null) {
            return self::$MessageType_RecoveryDevice;
        }

        return self::$MessageType_RecoveryDevice = new self('MessageType_RecoveryDevice', self::MessageType_RecoveryDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_WordRequest()
    {
        if (self::$MessageType_WordRequest !== null) {
            return self::$MessageType_WordRequest;
        }

        return self::$MessageType_WordRequest = new self('MessageType_WordRequest', self::MessageType_WordRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_WordAck()
    {
        if (self::$MessageType_WordAck !== null) {
            return self::$MessageType_WordAck;
        }

        return self::$MessageType_WordAck = new self('MessageType_WordAck', self::MessageType_WordAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_CipheredKeyValue()
    {
        if (self::$MessageType_CipheredKeyValue !== null) {
            return self::$MessageType_CipheredKeyValue;
        }

        return self::$MessageType_CipheredKeyValue = new self('MessageType_CipheredKeyValue', self::MessageType_CipheredKeyValue_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EncryptMessage()
    {
        if (self::$MessageType_EncryptMessage !== null) {
            return self::$MessageType_EncryptMessage;
        }

        return self::$MessageType_EncryptMessage = new self('MessageType_EncryptMessage', self::MessageType_EncryptMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EncryptedMessage()
    {
        if (self::$MessageType_EncryptedMessage !== null) {
            return self::$MessageType_EncryptedMessage;
        }

        return self::$MessageType_EncryptedMessage = new self('MessageType_EncryptedMessage', self::MessageType_EncryptedMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DecryptMessage()
    {
        if (self::$MessageType_DecryptMessage !== null) {
            return self::$MessageType_DecryptMessage;
        }

        return self::$MessageType_DecryptMessage = new self('MessageType_DecryptMessage', self::MessageType_DecryptMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DecryptedMessage()
    {
        if (self::$MessageType_DecryptedMessage !== null) {
            return self::$MessageType_DecryptedMessage;
        }

        return self::$MessageType_DecryptedMessage = new self('MessageType_DecryptedMessage', self::MessageType_DecryptedMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SignIdentity()
    {
        if (self::$MessageType_SignIdentity !== null) {
            return self::$MessageType_SignIdentity;
        }

        return self::$MessageType_SignIdentity = new self('MessageType_SignIdentity', self::MessageType_SignIdentity_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SignedIdentity()
    {
        if (self::$MessageType_SignedIdentity !== null) {
            return self::$MessageType_SignedIdentity;
        }

        return self::$MessageType_SignedIdentity = new self('MessageType_SignedIdentity', self::MessageType_SignedIdentity_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_GetFeatures()
    {
        if (self::$MessageType_GetFeatures !== null) {
            return self::$MessageType_GetFeatures;
        }

        return self::$MessageType_GetFeatures = new self('MessageType_GetFeatures', self::MessageType_GetFeatures_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumGetAddress()
    {
        if (self::$MessageType_EthereumGetAddress !== null) {
            return self::$MessageType_EthereumGetAddress;
        }

        return self::$MessageType_EthereumGetAddress = new self('MessageType_EthereumGetAddress', self::MessageType_EthereumGetAddress_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumAddress()
    {
        if (self::$MessageType_EthereumAddress !== null) {
            return self::$MessageType_EthereumAddress;
        }

        return self::$MessageType_EthereumAddress = new self('MessageType_EthereumAddress', self::MessageType_EthereumAddress_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumSignTx()
    {
        if (self::$MessageType_EthereumSignTx !== null) {
            return self::$MessageType_EthereumSignTx;
        }

        return self::$MessageType_EthereumSignTx = new self('MessageType_EthereumSignTx', self::MessageType_EthereumSignTx_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumTxRequest()
    {
        if (self::$MessageType_EthereumTxRequest !== null) {
            return self::$MessageType_EthereumTxRequest;
        }

        return self::$MessageType_EthereumTxRequest = new self('MessageType_EthereumTxRequest', self::MessageType_EthereumTxRequest_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumTxAck()
    {
        if (self::$MessageType_EthereumTxAck !== null) {
            return self::$MessageType_EthereumTxAck;
        }

        return self::$MessageType_EthereumTxAck = new self('MessageType_EthereumTxAck', self::MessageType_EthereumTxAck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_GetECDHSessionKey()
    {
        if (self::$MessageType_GetECDHSessionKey !== null) {
            return self::$MessageType_GetECDHSessionKey;
        }

        return self::$MessageType_GetECDHSessionKey = new self('MessageType_GetECDHSessionKey', self::MessageType_GetECDHSessionKey_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_ECDHSessionKey()
    {
        if (self::$MessageType_ECDHSessionKey !== null) {
            return self::$MessageType_ECDHSessionKey;
        }

        return self::$MessageType_ECDHSessionKey = new self('MessageType_ECDHSessionKey', self::MessageType_ECDHSessionKey_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_SetU2FCounter()
    {
        if (self::$MessageType_SetU2FCounter !== null) {
            return self::$MessageType_SetU2FCounter;
        }

        return self::$MessageType_SetU2FCounter = new self('MessageType_SetU2FCounter', self::MessageType_SetU2FCounter_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumSignMessage()
    {
        if (self::$MessageType_EthereumSignMessage !== null) {
            return self::$MessageType_EthereumSignMessage;
        }

        return self::$MessageType_EthereumSignMessage = new self('MessageType_EthereumSignMessage', self::MessageType_EthereumSignMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumVerifyMessage()
    {
        if (self::$MessageType_EthereumVerifyMessage !== null) {
            return self::$MessageType_EthereumVerifyMessage;
        }

        return self::$MessageType_EthereumVerifyMessage = new self('MessageType_EthereumVerifyMessage', self::MessageType_EthereumVerifyMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_EthereumMessageSignature()
    {
        if (self::$MessageType_EthereumMessageSignature !== null) {
            return self::$MessageType_EthereumMessageSignature;
        }

        return self::$MessageType_EthereumMessageSignature = new self('MessageType_EthereumMessageSignature', self::MessageType_EthereumMessageSignature_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_NEMGetAddress()
    {
        if (self::$MessageType_NEMGetAddress !== null) {
            return self::$MessageType_NEMGetAddress;
        }

        return self::$MessageType_NEMGetAddress = new self('MessageType_NEMGetAddress', self::MessageType_NEMGetAddress_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_NEMAddress()
    {
        if (self::$MessageType_NEMAddress !== null) {
            return self::$MessageType_NEMAddress;
        }

        return self::$MessageType_NEMAddress = new self('MessageType_NEMAddress', self::MessageType_NEMAddress_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_NEMSignTx()
    {
        if (self::$MessageType_NEMSignTx !== null) {
            return self::$MessageType_NEMSignTx;
        }

        return self::$MessageType_NEMSignTx = new self('MessageType_NEMSignTx', self::MessageType_NEMSignTx_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_NEMSignedTx()
    {
        if (self::$MessageType_NEMSignedTx !== null) {
            return self::$MessageType_NEMSignedTx;
        }

        return self::$MessageType_NEMSignedTx = new self('MessageType_NEMSignedTx', self::MessageType_NEMSignedTx_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_CosiCommit()
    {
        if (self::$MessageType_CosiCommit !== null) {
            return self::$MessageType_CosiCommit;
        }

        return self::$MessageType_CosiCommit = new self('MessageType_CosiCommit', self::MessageType_CosiCommit_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_CosiCommitment()
    {
        if (self::$MessageType_CosiCommitment !== null) {
            return self::$MessageType_CosiCommitment;
        }

        return self::$MessageType_CosiCommitment = new self('MessageType_CosiCommitment', self::MessageType_CosiCommitment_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_CosiSign()
    {
        if (self::$MessageType_CosiSign !== null) {
            return self::$MessageType_CosiSign;
        }

        return self::$MessageType_CosiSign = new self('MessageType_CosiSign', self::MessageType_CosiSign_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_CosiSignature()
    {
        if (self::$MessageType_CosiSignature !== null) {
            return self::$MessageType_CosiSignature;
        }

        return self::$MessageType_CosiSignature = new self('MessageType_CosiSignature', self::MessageType_CosiSignature_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_NEMDecryptMessage()
    {
        if (self::$MessageType_NEMDecryptMessage !== null) {
            return self::$MessageType_NEMDecryptMessage;
        }

        return self::$MessageType_NEMDecryptMessage = new self('MessageType_NEMDecryptMessage', self::MessageType_NEMDecryptMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_NEMDecryptedMessage()
    {
        if (self::$MessageType_NEMDecryptedMessage !== null) {
            return self::$MessageType_NEMDecryptedMessage;
        }

        return self::$MessageType_NEMDecryptedMessage = new self('MessageType_NEMDecryptedMessage', self::MessageType_NEMDecryptedMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkDecision()
    {
        if (self::$MessageType_DebugLinkDecision !== null) {
            return self::$MessageType_DebugLinkDecision;
        }

        return self::$MessageType_DebugLinkDecision = new self('MessageType_DebugLinkDecision', self::MessageType_DebugLinkDecision_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkGetState()
    {
        if (self::$MessageType_DebugLinkGetState !== null) {
            return self::$MessageType_DebugLinkGetState;
        }

        return self::$MessageType_DebugLinkGetState = new self('MessageType_DebugLinkGetState', self::MessageType_DebugLinkGetState_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkState()
    {
        if (self::$MessageType_DebugLinkState !== null) {
            return self::$MessageType_DebugLinkState;
        }

        return self::$MessageType_DebugLinkState = new self('MessageType_DebugLinkState', self::MessageType_DebugLinkState_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkStop()
    {
        if (self::$MessageType_DebugLinkStop !== null) {
            return self::$MessageType_DebugLinkStop;
        }

        return self::$MessageType_DebugLinkStop = new self('MessageType_DebugLinkStop', self::MessageType_DebugLinkStop_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkLog()
    {
        if (self::$MessageType_DebugLinkLog !== null) {
            return self::$MessageType_DebugLinkLog;
        }

        return self::$MessageType_DebugLinkLog = new self('MessageType_DebugLinkLog', self::MessageType_DebugLinkLog_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkMemoryRead()
    {
        if (self::$MessageType_DebugLinkMemoryRead !== null) {
            return self::$MessageType_DebugLinkMemoryRead;
        }

        return self::$MessageType_DebugLinkMemoryRead = new self('MessageType_DebugLinkMemoryRead', self::MessageType_DebugLinkMemoryRead_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkMemory()
    {
        if (self::$MessageType_DebugLinkMemory !== null) {
            return self::$MessageType_DebugLinkMemory;
        }

        return self::$MessageType_DebugLinkMemory = new self('MessageType_DebugLinkMemory', self::MessageType_DebugLinkMemory_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkMemoryWrite()
    {
        if (self::$MessageType_DebugLinkMemoryWrite !== null) {
            return self::$MessageType_DebugLinkMemoryWrite;
        }

        return self::$MessageType_DebugLinkMemoryWrite = new self('MessageType_DebugLinkMemoryWrite', self::MessageType_DebugLinkMemoryWrite_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function MessageType_DebugLinkFlashErase()
    {
        if (self::$MessageType_DebugLinkFlashErase !== null) {
            return self::$MessageType_DebugLinkFlashErase;
        }

        return self::$MessageType_DebugLinkFlashErase = new self('MessageType_DebugLinkFlashErase', self::MessageType_DebugLinkFlashErase_VALUE);
    }

    /**
     * @param int $value
     * @return \BitWasp\TrezorProto\MessageType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::MessageType_Initialize();
            case 1: return self::MessageType_Ping();
            case 2: return self::MessageType_Success();
            case 3: return self::MessageType_Failure();
            case 4: return self::MessageType_ChangePin();
            case 5: return self::MessageType_WipeDevice();
            case 6: return self::MessageType_FirmwareErase();
            case 7: return self::MessageType_FirmwareUpload();
            case 8: return self::MessageType_FirmwareRequest();
            case 9: return self::MessageType_GetEntropy();
            case 10: return self::MessageType_Entropy();
            case 11: return self::MessageType_GetPublicKey();
            case 12: return self::MessageType_PublicKey();
            case 13: return self::MessageType_LoadDevice();
            case 14: return self::MessageType_ResetDevice();
            case 15: return self::MessageType_SignTx();
            case 16: return self::MessageType_SimpleSignTx();
            case 17: return self::MessageType_Features();
            case 18: return self::MessageType_PinMatrixRequest();
            case 19: return self::MessageType_PinMatrixAck();
            case 20: return self::MessageType_Cancel();
            case 21: return self::MessageType_TxRequest();
            case 22: return self::MessageType_TxAck();
            case 23: return self::MessageType_CipherKeyValue();
            case 24: return self::MessageType_ClearSession();
            case 25: return self::MessageType_ApplySettings();
            case 26: return self::MessageType_ButtonRequest();
            case 27: return self::MessageType_ButtonAck();
            case 28: return self::MessageType_ApplyFlags();
            case 29: return self::MessageType_GetAddress();
            case 30: return self::MessageType_Address();
            case 32: return self::MessageType_SelfTest();
            case 34: return self::MessageType_BackupDevice();
            case 35: return self::MessageType_EntropyRequest();
            case 36: return self::MessageType_EntropyAck();
            case 38: return self::MessageType_SignMessage();
            case 39: return self::MessageType_VerifyMessage();
            case 40: return self::MessageType_MessageSignature();
            case 41: return self::MessageType_PassphraseRequest();
            case 42: return self::MessageType_PassphraseAck();
            case 77: return self::MessageType_PassphraseStateRequest();
            case 78: return self::MessageType_PassphraseStateAck();
            case 43: return self::MessageType_EstimateTxSize();
            case 44: return self::MessageType_TxSize();
            case 45: return self::MessageType_RecoveryDevice();
            case 46: return self::MessageType_WordRequest();
            case 47: return self::MessageType_WordAck();
            case 48: return self::MessageType_CipheredKeyValue();
            case 49: return self::MessageType_EncryptMessage();
            case 50: return self::MessageType_EncryptedMessage();
            case 51: return self::MessageType_DecryptMessage();
            case 52: return self::MessageType_DecryptedMessage();
            case 53: return self::MessageType_SignIdentity();
            case 54: return self::MessageType_SignedIdentity();
            case 55: return self::MessageType_GetFeatures();
            case 56: return self::MessageType_EthereumGetAddress();
            case 57: return self::MessageType_EthereumAddress();
            case 58: return self::MessageType_EthereumSignTx();
            case 59: return self::MessageType_EthereumTxRequest();
            case 60: return self::MessageType_EthereumTxAck();
            case 61: return self::MessageType_GetECDHSessionKey();
            case 62: return self::MessageType_ECDHSessionKey();
            case 63: return self::MessageType_SetU2FCounter();
            case 64: return self::MessageType_EthereumSignMessage();
            case 65: return self::MessageType_EthereumVerifyMessage();
            case 66: return self::MessageType_EthereumMessageSignature();
            case 67: return self::MessageType_NEMGetAddress();
            case 68: return self::MessageType_NEMAddress();
            case 69: return self::MessageType_NEMSignTx();
            case 70: return self::MessageType_NEMSignedTx();
            case 71: return self::MessageType_CosiCommit();
            case 72: return self::MessageType_CosiCommitment();
            case 73: return self::MessageType_CosiSign();
            case 74: return self::MessageType_CosiSignature();
            case 75: return self::MessageType_NEMDecryptMessage();
            case 76: return self::MessageType_NEMDecryptedMessage();
            case 100: return self::MessageType_DebugLinkDecision();
            case 101: return self::MessageType_DebugLinkGetState();
            case 102: return self::MessageType_DebugLinkState();
            case 103: return self::MessageType_DebugLinkStop();
            case 104: return self::MessageType_DebugLinkLog();
            case 110: return self::MessageType_DebugLinkMemoryRead();
            case 111: return self::MessageType_DebugLinkMemory();
            case 112: return self::MessageType_DebugLinkMemoryWrite();
            case 113: return self::MessageType_DebugLinkFlashErase();
            default: return null;
        }
    }


}

