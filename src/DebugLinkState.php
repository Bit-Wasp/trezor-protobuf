<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.DebugLinkState
 */
class DebugLinkState extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * layout optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $layout = null;

    /**
     * pin optional string = 2
     *
     * @var string
     */
    protected $pin = null;

    /**
     * matrix optional string = 3
     *
     * @var string
     */
    protected $matrix = null;

    /**
     * mnemonic optional string = 4
     *
     * @var string
     */
    protected $mnemonic = null;

    /**
     * node optional message = 5
     *
     * @var \BitWasp\TrezorProto\HDNodeType
     */
    protected $node = null;

    /**
     * passphrase_protection optional bool = 6
     *
     * @var bool
     */
    protected $passphrase_protection = null;

    /**
     * reset_word optional string = 7
     *
     * @var string
     */
    protected $reset_word = null;

    /**
     * reset_entropy optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $reset_entropy = null;

    /**
     * recovery_fake_word optional string = 9
     *
     * @var string
     */
    protected $recovery_fake_word = null;

    /**
     * recovery_word_pos optional uint32 = 10
     *
     * @var int
     */
    protected $recovery_word_pos = null;

    /**
     * reset_word_pos optional uint32 = 11
     *
     * @var int
     */
    protected $reset_word_pos = null;

    /**
     * Check if 'layout' has a value
     *
     * @return bool
     */
    public function hasLayout()
    {
        return $this->layout !== null;
    }

    /**
     * Get 'layout' value
     *
     * @return \Protobuf\Stream
     */
    public function getLayout()
    {
        return $this->layout;
    }

    /**
     * Set 'layout' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setLayout($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->layout = $value;
    }

    /**
     * Check if 'pin' has a value
     *
     * @return bool
     */
    public function hasPin()
    {
        return $this->pin !== null;
    }

    /**
     * Get 'pin' value
     *
     * @return string
     */
    public function getPin()
    {
        return $this->pin;
    }

    /**
     * Set 'pin' value
     *
     * @param string $value
     */
    public function setPin($value = null)
    {
        $this->pin = $value;
    }

    /**
     * Check if 'matrix' has a value
     *
     * @return bool
     */
    public function hasMatrix()
    {
        return $this->matrix !== null;
    }

    /**
     * Get 'matrix' value
     *
     * @return string
     */
    public function getMatrix()
    {
        return $this->matrix;
    }

    /**
     * Set 'matrix' value
     *
     * @param string $value
     */
    public function setMatrix($value = null)
    {
        $this->matrix = $value;
    }

    /**
     * Check if 'mnemonic' has a value
     *
     * @return bool
     */
    public function hasMnemonic()
    {
        return $this->mnemonic !== null;
    }

    /**
     * Get 'mnemonic' value
     *
     * @return string
     */
    public function getMnemonic()
    {
        return $this->mnemonic;
    }

    /**
     * Set 'mnemonic' value
     *
     * @param string $value
     */
    public function setMnemonic($value = null)
    {
        $this->mnemonic = $value;
    }

    /**
     * Check if 'node' has a value
     *
     * @return bool
     */
    public function hasNode()
    {
        return $this->node !== null;
    }

    /**
     * Get 'node' value
     *
     * @return \BitWasp\TrezorProto\HDNodeType
     */
    public function getNode()
    {
        return $this->node;
    }

    /**
     * Set 'node' value
     *
     * @param \BitWasp\TrezorProto\HDNodeType $value
     */
    public function setNode(\BitWasp\TrezorProto\HDNodeType $value = null)
    {
        $this->node = $value;
    }

    /**
     * Check if 'passphrase_protection' has a value
     *
     * @return bool
     */
    public function hasPassphraseProtection()
    {
        return $this->passphrase_protection !== null;
    }

    /**
     * Get 'passphrase_protection' value
     *
     * @return bool
     */
    public function getPassphraseProtection()
    {
        return $this->passphrase_protection;
    }

    /**
     * Set 'passphrase_protection' value
     *
     * @param bool $value
     */
    public function setPassphraseProtection($value = null)
    {
        $this->passphrase_protection = $value;
    }

    /**
     * Check if 'reset_word' has a value
     *
     * @return bool
     */
    public function hasResetWord()
    {
        return $this->reset_word !== null;
    }

    /**
     * Get 'reset_word' value
     *
     * @return string
     */
    public function getResetWord()
    {
        return $this->reset_word;
    }

    /**
     * Set 'reset_word' value
     *
     * @param string $value
     */
    public function setResetWord($value = null)
    {
        $this->reset_word = $value;
    }

    /**
     * Check if 'reset_entropy' has a value
     *
     * @return bool
     */
    public function hasResetEntropy()
    {
        return $this->reset_entropy !== null;
    }

    /**
     * Get 'reset_entropy' value
     *
     * @return \Protobuf\Stream
     */
    public function getResetEntropy()
    {
        return $this->reset_entropy;
    }

    /**
     * Set 'reset_entropy' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setResetEntropy($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->reset_entropy = $value;
    }

    /**
     * Check if 'recovery_fake_word' has a value
     *
     * @return bool
     */
    public function hasRecoveryFakeWord()
    {
        return $this->recovery_fake_word !== null;
    }

    /**
     * Get 'recovery_fake_word' value
     *
     * @return string
     */
    public function getRecoveryFakeWord()
    {
        return $this->recovery_fake_word;
    }

    /**
     * Set 'recovery_fake_word' value
     *
     * @param string $value
     */
    public function setRecoveryFakeWord($value = null)
    {
        $this->recovery_fake_word = $value;
    }

    /**
     * Check if 'recovery_word_pos' has a value
     *
     * @return bool
     */
    public function hasRecoveryWordPos()
    {
        return $this->recovery_word_pos !== null;
    }

    /**
     * Get 'recovery_word_pos' value
     *
     * @return int
     */
    public function getRecoveryWordPos()
    {
        return $this->recovery_word_pos;
    }

    /**
     * Set 'recovery_word_pos' value
     *
     * @param int $value
     */
    public function setRecoveryWordPos($value = null)
    {
        $this->recovery_word_pos = $value;
    }

    /**
     * Check if 'reset_word_pos' has a value
     *
     * @return bool
     */
    public function hasResetWordPos()
    {
        return $this->reset_word_pos !== null;
    }

    /**
     * Get 'reset_word_pos' value
     *
     * @return int
     */
    public function getResetWordPos()
    {
        return $this->reset_word_pos;
    }

    /**
     * Set 'reset_word_pos' value
     *
     * @param int $value
     */
    public function setResetWordPos($value = null)
    {
        $this->reset_word_pos = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'layout' => null,
            'pin' => null,
            'matrix' => null,
            'mnemonic' => null,
            'node' => null,
            'passphrase_protection' => null,
            'reset_word' => null,
            'reset_entropy' => null,
            'recovery_fake_word' => null,
            'recovery_word_pos' => null,
            'reset_word_pos' => null
        ], $values);

        $message->setLayout($values['layout']);
        $message->setPin($values['pin']);
        $message->setMatrix($values['matrix']);
        $message->setMnemonic($values['mnemonic']);
        $message->setNode($values['node']);
        $message->setPassphraseProtection($values['passphrase_protection']);
        $message->setResetWord($values['reset_word']);
        $message->setResetEntropy($values['reset_entropy']);
        $message->setRecoveryFakeWord($values['recovery_fake_word']);
        $message->setRecoveryWordPos($values['recovery_word_pos']);
        $message->setResetWordPos($values['reset_word_pos']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DebugLinkState',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'layout',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'pin',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'matrix',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'mnemonic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'node',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.BitWasp.TrezorProto.HDNodeType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'passphrase_protection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'reset_word',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'reset_entropy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'recovery_fake_word',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'recovery_word_pos',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'reset_word_pos',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->layout !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->layout);
        }

        if ($this->pin !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->pin);
        }

        if ($this->matrix !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->matrix);
        }

        if ($this->mnemonic !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->mnemonic);
        }

        if ($this->node !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->node->serializedSize($sizeContext));
            $this->node->writeTo($context);
        }

        if ($this->passphrase_protection !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->passphrase_protection);
        }

        if ($this->reset_word !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->reset_word);
        }

        if ($this->reset_entropy !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->reset_entropy);
        }

        if ($this->recovery_fake_word !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->recovery_fake_word);
        }

        if ($this->recovery_word_pos !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->recovery_word_pos);
        }

        if ($this->reset_word_pos !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->reset_word_pos);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->layout = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->pin = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->matrix = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->mnemonic = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\HDNodeType();

                $this->node = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->passphrase_protection = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->reset_word = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->reset_entropy = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->recovery_fake_word = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->recovery_word_pos = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->reset_word_pos = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->layout !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->layout);
        }

        if ($this->pin !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->pin);
        }

        if ($this->matrix !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->matrix);
        }

        if ($this->mnemonic !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->mnemonic);
        }

        if ($this->node !== null) {
            $innerSize = $this->node->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->passphrase_protection !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->reset_word !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->reset_word);
        }

        if ($this->reset_entropy !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->reset_entropy);
        }

        if ($this->recovery_fake_word !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->recovery_fake_word);
        }

        if ($this->recovery_word_pos !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->recovery_word_pos);
        }

        if ($this->reset_word_pos !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->reset_word_pos);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->layout = null;
        $this->pin = null;
        $this->matrix = null;
        $this->mnemonic = null;
        $this->node = null;
        $this->passphrase_protection = null;
        $this->reset_word = null;
        $this->reset_entropy = null;
        $this->recovery_fake_word = null;
        $this->recovery_word_pos = null;
        $this->reset_word_pos = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\DebugLinkState) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->layout = ($message->layout !== null) ? $message->layout : $this->layout;
        $this->pin = ($message->pin !== null) ? $message->pin : $this->pin;
        $this->matrix = ($message->matrix !== null) ? $message->matrix : $this->matrix;
        $this->mnemonic = ($message->mnemonic !== null) ? $message->mnemonic : $this->mnemonic;
        $this->node = ($message->node !== null) ? $message->node : $this->node;
        $this->passphrase_protection = ($message->passphrase_protection !== null) ? $message->passphrase_protection : $this->passphrase_protection;
        $this->reset_word = ($message->reset_word !== null) ? $message->reset_word : $this->reset_word;
        $this->reset_entropy = ($message->reset_entropy !== null) ? $message->reset_entropy : $this->reset_entropy;
        $this->recovery_fake_word = ($message->recovery_fake_word !== null) ? $message->recovery_fake_word : $this->recovery_fake_word;
        $this->recovery_word_pos = ($message->recovery_word_pos !== null) ? $message->recovery_word_pos : $this->recovery_word_pos;
        $this->reset_word_pos = ($message->reset_word_pos !== null) ? $message->reset_word_pos : $this->reset_word_pos;
    }


}

