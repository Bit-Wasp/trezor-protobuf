<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.TxOutputType
 */
class TxOutputType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * address optional string = 1
     *
     * @var string
     */
    protected $address = null;

    /**
     * address_n repeated uint32 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $address_n = null;

    /**
     * amount required uint64 = 3
     *
     * @var int
     */
    protected $amount = null;

    /**
     * script_type required enum = 4
     *
     * @var \BitWasp\TrezorProto\OutputScriptType
     */
    protected $script_type = null;

    /**
     * multisig optional message = 5
     *
     * @var \BitWasp\TrezorProto\MultisigRedeemScriptType
     */
    protected $multisig = null;

    /**
     * op_return_data optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $op_return_data = null;

    /**
     * decred_script_version optional uint32 = 7
     *
     * @var int
     */
    protected $decred_script_version = null;

    /**
     * Check if 'address' has a value
     *
     * @return bool
     */
    public function hasAddress()
    {
        return $this->address !== null;
    }

    /**
     * Get 'address' value
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set 'address' value
     *
     * @param string $value
     */
    public function setAddress($value = null)
    {
        $this->address = $value;
    }

    /**
     * Check if 'address_n' has a value
     *
     * @return bool
     */
    public function hasAddressNList()
    {
        return $this->address_n !== null;
    }

    /**
     * Get 'address_n' value
     *
     * @return \Protobuf\Collection
     */
    public function getAddressNList()
    {
        return $this->address_n;
    }

    /**
     * Set 'address_n' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAddressNList(\Protobuf\Collection $value = null)
    {
        $this->address_n = $value;
    }

    /**
     * Add a new element to 'address_n'
     *
     * @param int $value
     */
    public function addAddressN($value)
    {
        if ($this->address_n === null) {
            $this->address_n = new \Protobuf\ScalarCollection();
        }

        $this->address_n->add($value);
    }

    /**
     * Check if 'amount' has a value
     *
     * @return bool
     */
    public function hasAmount()
    {
        return $this->amount !== null;
    }

    /**
     * Get 'amount' value
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Set 'amount' value
     *
     * @param int $value
     */
    public function setAmount($value)
    {
        $this->amount = $value;
    }

    /**
     * Check if 'script_type' has a value
     *
     * @return bool
     */
    public function hasScriptType()
    {
        return $this->script_type !== null;
    }

    /**
     * Get 'script_type' value
     *
     * @return \BitWasp\TrezorProto\OutputScriptType
     */
    public function getScriptType()
    {
        return $this->script_type;
    }

    /**
     * Set 'script_type' value
     *
     * @param \BitWasp\TrezorProto\OutputScriptType $value
     */
    public function setScriptType(\BitWasp\TrezorProto\OutputScriptType $value)
    {
        $this->script_type = $value;
    }

    /**
     * Check if 'multisig' has a value
     *
     * @return bool
     */
    public function hasMultisig()
    {
        return $this->multisig !== null;
    }

    /**
     * Get 'multisig' value
     *
     * @return \BitWasp\TrezorProto\MultisigRedeemScriptType
     */
    public function getMultisig()
    {
        return $this->multisig;
    }

    /**
     * Set 'multisig' value
     *
     * @param \BitWasp\TrezorProto\MultisigRedeemScriptType $value
     */
    public function setMultisig(\BitWasp\TrezorProto\MultisigRedeemScriptType $value = null)
    {
        $this->multisig = $value;
    }

    /**
     * Check if 'op_return_data' has a value
     *
     * @return bool
     */
    public function hasOpReturnData()
    {
        return $this->op_return_data !== null;
    }

    /**
     * Get 'op_return_data' value
     *
     * @return \Protobuf\Stream
     */
    public function getOpReturnData()
    {
        return $this->op_return_data;
    }

    /**
     * Set 'op_return_data' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setOpReturnData($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->op_return_data = $value;
    }

    /**
     * Check if 'decred_script_version' has a value
     *
     * @return bool
     */
    public function hasDecredScriptVersion()
    {
        return $this->decred_script_version !== null;
    }

    /**
     * Get 'decred_script_version' value
     *
     * @return int
     */
    public function getDecredScriptVersion()
    {
        return $this->decred_script_version;
    }

    /**
     * Set 'decred_script_version' value
     *
     * @param int $value
     */
    public function setDecredScriptVersion($value = null)
    {
        $this->decred_script_version = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['amount'])) {
            throw new \InvalidArgumentException('Field "amount" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['script_type'])) {
            throw new \InvalidArgumentException('Field "script_type" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'address' => null,
            'address_n' => [],
            'multisig' => null,
            'op_return_data' => null,
            'decred_script_version' => null
        ], $values);

        $message->setAddress($values['address']);
        $message->setAmount($values['amount']);
        $message->setScriptType($values['script_type']);
        $message->setMultisig($values['multisig']);
        $message->setOpReturnData($values['op_return_data']);
        $message->setDecredScriptVersion($values['decred_script_version']);

        foreach ($values['address_n'] as $item) {
            $message->addAddressN($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TxOutputType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'address_n',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'amount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'script_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.BitWasp.TrezorProto.OutputScriptType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'multisig',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.BitWasp.TrezorProto.MultisigRedeemScriptType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'op_return_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'decred_script_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->amount === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\TxOutputType#amount" (tag 3) is required but has no value.');
        }

        if ($this->script_type === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\TxOutputType#script_type" (tag 4) is required but has no value.');
        }

        if ($this->address !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->address);
        }

        if ($this->address_n !== null) {
            foreach ($this->address_n as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->amount !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->amount);
        }

        if ($this->script_type !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->script_type->value());
        }

        if ($this->multisig !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->multisig->serializedSize($sizeContext));
            $this->multisig->writeTo($context);
        }

        if ($this->op_return_data !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->op_return_data);
        }

        if ($this->decred_script_version !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->decred_script_version);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->address = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->address_n === null) {
                    $this->address_n = new \Protobuf\ScalarCollection();
                }

                $this->address_n->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->amount = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->script_type = \BitWasp\TrezorProto\OutputScriptType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\MultisigRedeemScriptType();

                $this->multisig = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->op_return_data = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->decred_script_version = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->address !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->address);
        }

        if ($this->address_n !== null) {
            foreach ($this->address_n as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->amount !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->amount);
        }

        if ($this->script_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->script_type->value());
        }

        if ($this->multisig !== null) {
            $innerSize = $this->multisig->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->op_return_data !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->op_return_data);
        }

        if ($this->decred_script_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->decred_script_version);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->address = null;
        $this->address_n = null;
        $this->amount = null;
        $this->script_type = null;
        $this->multisig = null;
        $this->op_return_data = null;
        $this->decred_script_version = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\TxOutputType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->address = ($message->address !== null) ? $message->address : $this->address;
        $this->address_n = ($message->address_n !== null) ? $message->address_n : $this->address_n;
        $this->amount = ($message->amount !== null) ? $message->amount : $this->amount;
        $this->script_type = ($message->script_type !== null) ? $message->script_type : $this->script_type;
        $this->multisig = ($message->multisig !== null) ? $message->multisig : $this->multisig;
        $this->op_return_data = ($message->op_return_data !== null) ? $message->op_return_data : $this->op_return_data;
        $this->decred_script_version = ($message->decred_script_version !== null) ? $message->decred_script_version : $this->decred_script_version;
    }


}

