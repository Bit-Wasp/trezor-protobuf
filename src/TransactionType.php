<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.TransactionType
 */
class TransactionType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * version optional uint32 = 1
     *
     * @var int
     */
    protected $version = null;

    /**
     * inputs repeated message = 2
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\TxInputType>
     */
    protected $inputs = null;

    /**
     * bin_outputs repeated message = 3
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputBinType>
     */
    protected $bin_outputs = null;

    /**
     * outputs repeated message = 5
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputType>
     */
    protected $outputs = null;

    /**
     * lock_time optional uint32 = 4
     *
     * @var int
     */
    protected $lock_time = null;

    /**
     * inputs_cnt optional uint32 = 6
     *
     * @var int
     */
    protected $inputs_cnt = null;

    /**
     * outputs_cnt optional uint32 = 7
     *
     * @var int
     */
    protected $outputs_cnt = null;

    /**
     * extra_data optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $extra_data = null;

    /**
     * extra_data_len optional uint32 = 9
     *
     * @var int
     */
    protected $extra_data_len = null;

    /**
     * decred_expiry optional uint32 = 10
     *
     * @var int
     */
    protected $decred_expiry = null;

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param int $value
     */
    public function setVersion($value = null)
    {
        $this->version = $value;
    }

    /**
     * Check if 'inputs' has a value
     *
     * @return bool
     */
    public function hasInputsList()
    {
        return $this->inputs !== null;
    }

    /**
     * Get 'inputs' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\TxInputType>
     */
    public function getInputsList()
    {
        return $this->inputs;
    }

    /**
     * Set 'inputs' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\TxInputType> $value
     */
    public function setInputsList(\Protobuf\Collection $value = null)
    {
        $this->inputs = $value;
    }

    /**
     * Add a new element to 'inputs'
     *
     * @param \BitWasp\TrezorProto\TxInputType $value
     */
    public function addInputs(\BitWasp\TrezorProto\TxInputType $value)
    {
        if ($this->inputs === null) {
            $this->inputs = new \Protobuf\MessageCollection();
        }

        $this->inputs->add($value);
    }

    /**
     * Check if 'bin_outputs' has a value
     *
     * @return bool
     */
    public function hasBinOutputsList()
    {
        return $this->bin_outputs !== null;
    }

    /**
     * Get 'bin_outputs' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputBinType>
     */
    public function getBinOutputsList()
    {
        return $this->bin_outputs;
    }

    /**
     * Set 'bin_outputs' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputBinType> $value
     */
    public function setBinOutputsList(\Protobuf\Collection $value = null)
    {
        $this->bin_outputs = $value;
    }

    /**
     * Add a new element to 'bin_outputs'
     *
     * @param \BitWasp\TrezorProto\TxOutputBinType $value
     */
    public function addBinOutputs(\BitWasp\TrezorProto\TxOutputBinType $value)
    {
        if ($this->bin_outputs === null) {
            $this->bin_outputs = new \Protobuf\MessageCollection();
        }

        $this->bin_outputs->add($value);
    }

    /**
     * Check if 'outputs' has a value
     *
     * @return bool
     */
    public function hasOutputsList()
    {
        return $this->outputs !== null;
    }

    /**
     * Get 'outputs' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputType>
     */
    public function getOutputsList()
    {
        return $this->outputs;
    }

    /**
     * Set 'outputs' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputType> $value
     */
    public function setOutputsList(\Protobuf\Collection $value = null)
    {
        $this->outputs = $value;
    }

    /**
     * Add a new element to 'outputs'
     *
     * @param \BitWasp\TrezorProto\TxOutputType $value
     */
    public function addOutputs(\BitWasp\TrezorProto\TxOutputType $value)
    {
        if ($this->outputs === null) {
            $this->outputs = new \Protobuf\MessageCollection();
        }

        $this->outputs->add($value);
    }

    /**
     * Check if 'lock_time' has a value
     *
     * @return bool
     */
    public function hasLockTime()
    {
        return $this->lock_time !== null;
    }

    /**
     * Get 'lock_time' value
     *
     * @return int
     */
    public function getLockTime()
    {
        return $this->lock_time;
    }

    /**
     * Set 'lock_time' value
     *
     * @param int $value
     */
    public function setLockTime($value = null)
    {
        $this->lock_time = $value;
    }

    /**
     * Check if 'inputs_cnt' has a value
     *
     * @return bool
     */
    public function hasInputsCnt()
    {
        return $this->inputs_cnt !== null;
    }

    /**
     * Get 'inputs_cnt' value
     *
     * @return int
     */
    public function getInputsCnt()
    {
        return $this->inputs_cnt;
    }

    /**
     * Set 'inputs_cnt' value
     *
     * @param int $value
     */
    public function setInputsCnt($value = null)
    {
        $this->inputs_cnt = $value;
    }

    /**
     * Check if 'outputs_cnt' has a value
     *
     * @return bool
     */
    public function hasOutputsCnt()
    {
        return $this->outputs_cnt !== null;
    }

    /**
     * Get 'outputs_cnt' value
     *
     * @return int
     */
    public function getOutputsCnt()
    {
        return $this->outputs_cnt;
    }

    /**
     * Set 'outputs_cnt' value
     *
     * @param int $value
     */
    public function setOutputsCnt($value = null)
    {
        $this->outputs_cnt = $value;
    }

    /**
     * Check if 'extra_data' has a value
     *
     * @return bool
     */
    public function hasExtraData()
    {
        return $this->extra_data !== null;
    }

    /**
     * Get 'extra_data' value
     *
     * @return \Protobuf\Stream
     */
    public function getExtraData()
    {
        return $this->extra_data;
    }

    /**
     * Set 'extra_data' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setExtraData($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->extra_data = $value;
    }

    /**
     * Check if 'extra_data_len' has a value
     *
     * @return bool
     */
    public function hasExtraDataLen()
    {
        return $this->extra_data_len !== null;
    }

    /**
     * Get 'extra_data_len' value
     *
     * @return int
     */
    public function getExtraDataLen()
    {
        return $this->extra_data_len;
    }

    /**
     * Set 'extra_data_len' value
     *
     * @param int $value
     */
    public function setExtraDataLen($value = null)
    {
        $this->extra_data_len = $value;
    }

    /**
     * Check if 'decred_expiry' has a value
     *
     * @return bool
     */
    public function hasDecredExpiry()
    {
        return $this->decred_expiry !== null;
    }

    /**
     * Get 'decred_expiry' value
     *
     * @return int
     */
    public function getDecredExpiry()
    {
        return $this->decred_expiry;
    }

    /**
     * Set 'decred_expiry' value
     *
     * @param int $value
     */
    public function setDecredExpiry($value = null)
    {
        $this->decred_expiry = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'version' => null,
            'inputs' => [],
            'bin_outputs' => [],
            'outputs' => [],
            'lock_time' => null,
            'inputs_cnt' => null,
            'outputs_cnt' => null,
            'extra_data' => null,
            'extra_data_len' => null,
            'decred_expiry' => null
        ], $values);

        $message->setVersion($values['version']);
        $message->setLockTime($values['lock_time']);
        $message->setInputsCnt($values['inputs_cnt']);
        $message->setOutputsCnt($values['outputs_cnt']);
        $message->setExtraData($values['extra_data']);
        $message->setExtraDataLen($values['extra_data_len']);
        $message->setDecredExpiry($values['decred_expiry']);

        foreach ($values['inputs'] as $item) {
            $message->addInputs($item);
        }

        foreach ($values['bin_outputs'] as $item) {
            $message->addBinOutputs($item);
        }

        foreach ($values['outputs'] as $item) {
            $message->addOutputs($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TransactionType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'inputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.TxInputType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'bin_outputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.TxOutputBinType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'outputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.TxOutputType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'lock_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'inputs_cnt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'outputs_cnt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'extra_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'extra_data_len',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'decred_expiry',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->version !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->version);
        }

        if ($this->inputs !== null) {
            foreach ($this->inputs as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->bin_outputs !== null) {
            foreach ($this->bin_outputs as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->outputs !== null) {
            foreach ($this->outputs as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->lock_time !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->lock_time);
        }

        if ($this->inputs_cnt !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->inputs_cnt);
        }

        if ($this->outputs_cnt !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->outputs_cnt);
        }

        if ($this->extra_data !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->extra_data);
        }

        if ($this->extra_data_len !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->extra_data_len);
        }

        if ($this->decred_expiry !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->decred_expiry);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\TxInputType();

                if ($this->inputs === null) {
                    $this->inputs = new \Protobuf\MessageCollection();
                }

                $this->inputs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\TxOutputBinType();

                if ($this->bin_outputs === null) {
                    $this->bin_outputs = new \Protobuf\MessageCollection();
                }

                $this->bin_outputs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\TxOutputType();

                if ($this->outputs === null) {
                    $this->outputs = new \Protobuf\MessageCollection();
                }

                $this->outputs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->lock_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->inputs_cnt = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->outputs_cnt = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->extra_data = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->extra_data_len = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->decred_expiry = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->version);
        }

        if ($this->inputs !== null) {
            foreach ($this->inputs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->bin_outputs !== null) {
            foreach ($this->bin_outputs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->outputs !== null) {
            foreach ($this->outputs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->lock_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->lock_time);
        }

        if ($this->inputs_cnt !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->inputs_cnt);
        }

        if ($this->outputs_cnt !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->outputs_cnt);
        }

        if ($this->extra_data !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->extra_data);
        }

        if ($this->extra_data_len !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->extra_data_len);
        }

        if ($this->decred_expiry !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->decred_expiry);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->version = null;
        $this->inputs = null;
        $this->bin_outputs = null;
        $this->outputs = null;
        $this->lock_time = null;
        $this->inputs_cnt = null;
        $this->outputs_cnt = null;
        $this->extra_data = null;
        $this->extra_data_len = null;
        $this->decred_expiry = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\TransactionType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->inputs = ($message->inputs !== null) ? $message->inputs : $this->inputs;
        $this->bin_outputs = ($message->bin_outputs !== null) ? $message->bin_outputs : $this->bin_outputs;
        $this->outputs = ($message->outputs !== null) ? $message->outputs : $this->outputs;
        $this->lock_time = ($message->lock_time !== null) ? $message->lock_time : $this->lock_time;
        $this->inputs_cnt = ($message->inputs_cnt !== null) ? $message->inputs_cnt : $this->inputs_cnt;
        $this->outputs_cnt = ($message->outputs_cnt !== null) ? $message->outputs_cnt : $this->outputs_cnt;
        $this->extra_data = ($message->extra_data !== null) ? $message->extra_data : $this->extra_data;
        $this->extra_data_len = ($message->extra_data_len !== null) ? $message->extra_data_len : $this->extra_data_len;
        $this->decred_expiry = ($message->decred_expiry !== null) ? $message->decred_expiry : $this->decred_expiry;
    }


}

