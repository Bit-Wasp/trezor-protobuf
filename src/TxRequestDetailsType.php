<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.TxRequestDetailsType
 */
class TxRequestDetailsType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * request_index optional uint32 = 1
     *
     * @var int
     */
    protected $request_index = null;

    /**
     * tx_hash optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $tx_hash = null;

    /**
     * extra_data_len optional uint32 = 3
     *
     * @var int
     */
    protected $extra_data_len = null;

    /**
     * extra_data_offset optional uint32 = 4
     *
     * @var int
     */
    protected $extra_data_offset = null;

    /**
     * Check if 'request_index' has a value
     *
     * @return bool
     */
    public function hasRequestIndex()
    {
        return $this->request_index !== null;
    }

    /**
     * Get 'request_index' value
     *
     * @return int
     */
    public function getRequestIndex()
    {
        return $this->request_index;
    }

    /**
     * Set 'request_index' value
     *
     * @param int $value
     */
    public function setRequestIndex($value = null)
    {
        $this->request_index = $value;
    }

    /**
     * Check if 'tx_hash' has a value
     *
     * @return bool
     */
    public function hasTxHash()
    {
        return $this->tx_hash !== null;
    }

    /**
     * Get 'tx_hash' value
     *
     * @return \Protobuf\Stream
     */
    public function getTxHash()
    {
        return $this->tx_hash;
    }

    /**
     * Set 'tx_hash' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setTxHash($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->tx_hash = $value;
    }

    /**
     * Check if 'extra_data_len' has a value
     *
     * @return bool
     */
    public function hasExtraDataLen()
    {
        return $this->extra_data_len !== null;
    }

    /**
     * Get 'extra_data_len' value
     *
     * @return int
     */
    public function getExtraDataLen()
    {
        return $this->extra_data_len;
    }

    /**
     * Set 'extra_data_len' value
     *
     * @param int $value
     */
    public function setExtraDataLen($value = null)
    {
        $this->extra_data_len = $value;
    }

    /**
     * Check if 'extra_data_offset' has a value
     *
     * @return bool
     */
    public function hasExtraDataOffset()
    {
        return $this->extra_data_offset !== null;
    }

    /**
     * Get 'extra_data_offset' value
     *
     * @return int
     */
    public function getExtraDataOffset()
    {
        return $this->extra_data_offset;
    }

    /**
     * Set 'extra_data_offset' value
     *
     * @param int $value
     */
    public function setExtraDataOffset($value = null)
    {
        $this->extra_data_offset = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'request_index' => null,
            'tx_hash' => null,
            'extra_data_len' => null,
            'extra_data_offset' => null
        ], $values);

        $message->setRequestIndex($values['request_index']);
        $message->setTxHash($values['tx_hash']);
        $message->setExtraDataLen($values['extra_data_len']);
        $message->setExtraDataOffset($values['extra_data_offset']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TxRequestDetailsType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'request_index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'tx_hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'extra_data_len',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'extra_data_offset',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->request_index !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->request_index);
        }

        if ($this->tx_hash !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->tx_hash);
        }

        if ($this->extra_data_len !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->extra_data_len);
        }

        if ($this->extra_data_offset !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->extra_data_offset);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->request_index = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->tx_hash = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->extra_data_len = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->extra_data_offset = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->request_index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->request_index);
        }

        if ($this->tx_hash !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->tx_hash);
        }

        if ($this->extra_data_len !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->extra_data_len);
        }

        if ($this->extra_data_offset !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->extra_data_offset);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->request_index = null;
        $this->tx_hash = null;
        $this->extra_data_len = null;
        $this->extra_data_offset = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\TxRequestDetailsType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->request_index = ($message->request_index !== null) ? $message->request_index : $this->request_index;
        $this->tx_hash = ($message->tx_hash !== null) ? $message->tx_hash : $this->tx_hash;
        $this->extra_data_len = ($message->extra_data_len !== null) ? $message->extra_data_len : $this->extra_data_len;
        $this->extra_data_offset = ($message->extra_data_offset !== null) ? $message->extra_data_offset : $this->extra_data_offset;
    }


}

