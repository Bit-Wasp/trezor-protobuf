<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.IdentityType
 */
class IdentityType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * proto optional string = 1
     *
     * @var string
     */
    protected $proto = null;

    /**
     * user optional string = 2
     *
     * @var string
     */
    protected $user = null;

    /**
     * host optional string = 3
     *
     * @var string
     */
    protected $host = null;

    /**
     * port optional string = 4
     *
     * @var string
     */
    protected $port = null;

    /**
     * path optional string = 5
     *
     * @var string
     */
    protected $path = null;

    /**
     * index optional uint32 = 6
     *
     * @var int
     */
    protected $index = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->index = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'proto' has a value
     *
     * @return bool
     */
    public function hasProto()
    {
        return $this->proto !== null;
    }

    /**
     * Get 'proto' value
     *
     * @return string
     */
    public function getProto()
    {
        return $this->proto;
    }

    /**
     * Set 'proto' value
     *
     * @param string $value
     */
    public function setProto($value = null)
    {
        $this->proto = $value;
    }

    /**
     * Check if 'user' has a value
     *
     * @return bool
     */
    public function hasUser()
    {
        return $this->user !== null;
    }

    /**
     * Get 'user' value
     *
     * @return string
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set 'user' value
     *
     * @param string $value
     */
    public function setUser($value = null)
    {
        $this->user = $value;
    }

    /**
     * Check if 'host' has a value
     *
     * @return bool
     */
    public function hasHost()
    {
        return $this->host !== null;
    }

    /**
     * Get 'host' value
     *
     * @return string
     */
    public function getHost()
    {
        return $this->host;
    }

    /**
     * Set 'host' value
     *
     * @param string $value
     */
    public function setHost($value = null)
    {
        $this->host = $value;
    }

    /**
     * Check if 'port' has a value
     *
     * @return bool
     */
    public function hasPort()
    {
        return $this->port !== null;
    }

    /**
     * Get 'port' value
     *
     * @return string
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * Set 'port' value
     *
     * @param string $value
     */
    public function setPort($value = null)
    {
        $this->port = $value;
    }

    /**
     * Check if 'path' has a value
     *
     * @return bool
     */
    public function hasPath()
    {
        return $this->path !== null;
    }

    /**
     * Get 'path' value
     *
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Set 'path' value
     *
     * @param string $value
     */
    public function setPath($value = null)
    {
        $this->path = $value;
    }

    /**
     * Check if 'index' has a value
     *
     * @return bool
     */
    public function hasIndex()
    {
        return $this->index !== null;
    }

    /**
     * Get 'index' value
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * Set 'index' value
     *
     * @param int $value
     */
    public function setIndex($value = null)
    {
        $this->index = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'proto' => null,
            'user' => null,
            'host' => null,
            'port' => null,
            'path' => null,
            'index' => '0'
        ], $values);

        $message->setProto($values['proto']);
        $message->setUser($values['user']);
        $message->setHost($values['host']);
        $message->setPort($values['port']);
        $message->setPath($values['path']);
        $message->setIndex($values['index']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'IdentityType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'proto',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'user',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'host',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'path',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->proto !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->proto);
        }

        if ($this->user !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->user);
        }

        if ($this->host !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->host);
        }

        if ($this->port !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->port);
        }

        if ($this->path !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->path);
        }

        if ($this->index !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->index);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->proto = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->user = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->host = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->port = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->path = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->index = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->proto !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->proto);
        }

        if ($this->user !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->user);
        }

        if ($this->host !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->host);
        }

        if ($this->port !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->port);
        }

        if ($this->path !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->path);
        }

        if ($this->index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->index);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->proto = null;
        $this->user = null;
        $this->host = null;
        $this->port = null;
        $this->path = null;
        $this->index = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\IdentityType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->proto = ($message->proto !== null) ? $message->proto : $this->proto;
        $this->user = ($message->user !== null) ? $message->user : $this->user;
        $this->host = ($message->host !== null) ? $message->host : $this->host;
        $this->port = ($message->port !== null) ? $message->port : $this->port;
        $this->path = ($message->path !== null) ? $message->path : $this->path;
        $this->index = ($message->index !== null) ? $message->index : $this->index;
    }


}

