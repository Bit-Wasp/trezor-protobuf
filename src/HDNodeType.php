<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.HDNodeType
 */
class HDNodeType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * depth required uint32 = 1
     *
     * @var int
     */
    protected $depth = null;

    /**
     * fingerprint required uint32 = 2
     *
     * @var int
     */
    protected $fingerprint = null;

    /**
     * child_num required uint32 = 3
     *
     * @var int
     */
    protected $child_num = null;

    /**
     * chain_code required bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $chain_code = null;

    /**
     * private_key optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $private_key = null;

    /**
     * public_key optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $public_key = null;

    /**
     * Check if 'depth' has a value
     *
     * @return bool
     */
    public function hasDepth()
    {
        return $this->depth !== null;
    }

    /**
     * Get 'depth' value
     *
     * @return int
     */
    public function getDepth()
    {
        return $this->depth;
    }

    /**
     * Set 'depth' value
     *
     * @param int $value
     */
    public function setDepth($value)
    {
        $this->depth = $value;
    }

    /**
     * Check if 'fingerprint' has a value
     *
     * @return bool
     */
    public function hasFingerprint()
    {
        return $this->fingerprint !== null;
    }

    /**
     * Get 'fingerprint' value
     *
     * @return int
     */
    public function getFingerprint()
    {
        return $this->fingerprint;
    }

    /**
     * Set 'fingerprint' value
     *
     * @param int $value
     */
    public function setFingerprint($value)
    {
        $this->fingerprint = $value;
    }

    /**
     * Check if 'child_num' has a value
     *
     * @return bool
     */
    public function hasChildNum()
    {
        return $this->child_num !== null;
    }

    /**
     * Get 'child_num' value
     *
     * @return int
     */
    public function getChildNum()
    {
        return $this->child_num;
    }

    /**
     * Set 'child_num' value
     *
     * @param int $value
     */
    public function setChildNum($value)
    {
        $this->child_num = $value;
    }

    /**
     * Check if 'chain_code' has a value
     *
     * @return bool
     */
    public function hasChainCode()
    {
        return $this->chain_code !== null;
    }

    /**
     * Get 'chain_code' value
     *
     * @return \Protobuf\Stream
     */
    public function getChainCode()
    {
        return $this->chain_code;
    }

    /**
     * Set 'chain_code' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setChainCode($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->chain_code = $value;
    }

    /**
     * Check if 'private_key' has a value
     *
     * @return bool
     */
    public function hasPrivateKey()
    {
        return $this->private_key !== null;
    }

    /**
     * Get 'private_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getPrivateKey()
    {
        return $this->private_key;
    }

    /**
     * Set 'private_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPrivateKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->private_key = $value;
    }

    /**
     * Check if 'public_key' has a value
     *
     * @return bool
     */
    public function hasPublicKey()
    {
        return $this->public_key !== null;
    }

    /**
     * Get 'public_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getPublicKey()
    {
        return $this->public_key;
    }

    /**
     * Set 'public_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPublicKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->public_key = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['depth'])) {
            throw new \InvalidArgumentException('Field "depth" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['fingerprint'])) {
            throw new \InvalidArgumentException('Field "fingerprint" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['child_num'])) {
            throw new \InvalidArgumentException('Field "child_num" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['chain_code'])) {
            throw new \InvalidArgumentException('Field "chain_code" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'private_key' => null,
            'public_key' => null
        ], $values);

        $message->setDepth($values['depth']);
        $message->setFingerprint($values['fingerprint']);
        $message->setChildNum($values['child_num']);
        $message->setChainCode($values['chain_code']);
        $message->setPrivateKey($values['private_key']);
        $message->setPublicKey($values['public_key']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'HDNodeType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'depth',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'fingerprint',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'child_num',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'chain_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'private_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'public_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->depth === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\HDNodeType#depth" (tag 1) is required but has no value.');
        }

        if ($this->fingerprint === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\HDNodeType#fingerprint" (tag 2) is required but has no value.');
        }

        if ($this->child_num === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\HDNodeType#child_num" (tag 3) is required but has no value.');
        }

        if ($this->chain_code === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\HDNodeType#chain_code" (tag 4) is required but has no value.');
        }

        if ($this->depth !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->depth);
        }

        if ($this->fingerprint !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->fingerprint);
        }

        if ($this->child_num !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->child_num);
        }

        if ($this->chain_code !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->chain_code);
        }

        if ($this->private_key !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->private_key);
        }

        if ($this->public_key !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->public_key);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->depth = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->fingerprint = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->child_num = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->chain_code = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->private_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->public_key = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->depth !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->depth);
        }

        if ($this->fingerprint !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->fingerprint);
        }

        if ($this->child_num !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->child_num);
        }

        if ($this->chain_code !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->chain_code);
        }

        if ($this->private_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->private_key);
        }

        if ($this->public_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->public_key);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->depth = null;
        $this->fingerprint = null;
        $this->child_num = null;
        $this->chain_code = null;
        $this->private_key = null;
        $this->public_key = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\HDNodeType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->depth = ($message->depth !== null) ? $message->depth : $this->depth;
        $this->fingerprint = ($message->fingerprint !== null) ? $message->fingerprint : $this->fingerprint;
        $this->child_num = ($message->child_num !== null) ? $message->child_num : $this->child_num;
        $this->chain_code = ($message->chain_code !== null) ? $message->chain_code : $this->chain_code;
        $this->private_key = ($message->private_key !== null) ? $message->private_key : $this->private_key;
        $this->public_key = ($message->public_key !== null) ? $message->public_key : $this->public_key;
    }


}

