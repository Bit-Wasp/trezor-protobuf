<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.Features
 */
class Features extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * vendor optional string = 1
     *
     * @var string
     */
    protected $vendor = null;

    /**
     * major_version optional uint32 = 2
     *
     * @var int
     */
    protected $major_version = null;

    /**
     * minor_version optional uint32 = 3
     *
     * @var int
     */
    protected $minor_version = null;

    /**
     * patch_version optional uint32 = 4
     *
     * @var int
     */
    protected $patch_version = null;

    /**
     * bootloader_mode optional bool = 5
     *
     * @var bool
     */
    protected $bootloader_mode = null;

    /**
     * device_id optional string = 6
     *
     * @var string
     */
    protected $device_id = null;

    /**
     * pin_protection optional bool = 7
     *
     * @var bool
     */
    protected $pin_protection = null;

    /**
     * passphrase_protection optional bool = 8
     *
     * @var bool
     */
    protected $passphrase_protection = null;

    /**
     * language optional string = 9
     *
     * @var string
     */
    protected $language = null;

    /**
     * label optional string = 10
     *
     * @var string
     */
    protected $label = null;

    /**
     * coins repeated message = 11
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\CoinType>
     */
    protected $coins = null;

    /**
     * initialized optional bool = 12
     *
     * @var bool
     */
    protected $initialized = null;

    /**
     * revision optional bytes = 13
     *
     * @var \Protobuf\Stream
     */
    protected $revision = null;

    /**
     * bootloader_hash optional bytes = 14
     *
     * @var \Protobuf\Stream
     */
    protected $bootloader_hash = null;

    /**
     * imported optional bool = 15
     *
     * @var bool
     */
    protected $imported = null;

    /**
     * pin_cached optional bool = 16
     *
     * @var bool
     */
    protected $pin_cached = null;

    /**
     * passphrase_cached optional bool = 17
     *
     * @var bool
     */
    protected $passphrase_cached = null;

    /**
     * firmware_present optional bool = 18
     *
     * @var bool
     */
    protected $firmware_present = null;

    /**
     * needs_backup optional bool = 19
     *
     * @var bool
     */
    protected $needs_backup = null;

    /**
     * flags optional uint32 = 20
     *
     * @var int
     */
    protected $flags = null;

    /**
     * model optional string = 21
     *
     * @var string
     */
    protected $model = null;

    /**
     * fw_major optional uint32 = 22
     *
     * @var int
     */
    protected $fw_major = null;

    /**
     * fw_minor optional uint32 = 23
     *
     * @var int
     */
    protected $fw_minor = null;

    /**
     * fw_patch optional uint32 = 24
     *
     * @var int
     */
    protected $fw_patch = null;

    /**
     * fw_vendor optional string = 25
     *
     * @var string
     */
    protected $fw_vendor = null;

    /**
     * fw_vendor_keys optional bytes = 26
     *
     * @var \Protobuf\Stream
     */
    protected $fw_vendor_keys = null;

    /**
     * unfinished_backup optional bool = 27
     *
     * @var bool
     */
    protected $unfinished_backup = null;

    /**
     * Check if 'vendor' has a value
     *
     * @return bool
     */
    public function hasVendor()
    {
        return $this->vendor !== null;
    }

    /**
     * Get 'vendor' value
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->vendor;
    }

    /**
     * Set 'vendor' value
     *
     * @param string $value
     */
    public function setVendor($value = null)
    {
        $this->vendor = $value;
    }

    /**
     * Check if 'major_version' has a value
     *
     * @return bool
     */
    public function hasMajorVersion()
    {
        return $this->major_version !== null;
    }

    /**
     * Get 'major_version' value
     *
     * @return int
     */
    public function getMajorVersion()
    {
        return $this->major_version;
    }

    /**
     * Set 'major_version' value
     *
     * @param int $value
     */
    public function setMajorVersion($value = null)
    {
        $this->major_version = $value;
    }

    /**
     * Check if 'minor_version' has a value
     *
     * @return bool
     */
    public function hasMinorVersion()
    {
        return $this->minor_version !== null;
    }

    /**
     * Get 'minor_version' value
     *
     * @return int
     */
    public function getMinorVersion()
    {
        return $this->minor_version;
    }

    /**
     * Set 'minor_version' value
     *
     * @param int $value
     */
    public function setMinorVersion($value = null)
    {
        $this->minor_version = $value;
    }

    /**
     * Check if 'patch_version' has a value
     *
     * @return bool
     */
    public function hasPatchVersion()
    {
        return $this->patch_version !== null;
    }

    /**
     * Get 'patch_version' value
     *
     * @return int
     */
    public function getPatchVersion()
    {
        return $this->patch_version;
    }

    /**
     * Set 'patch_version' value
     *
     * @param int $value
     */
    public function setPatchVersion($value = null)
    {
        $this->patch_version = $value;
    }

    /**
     * Check if 'bootloader_mode' has a value
     *
     * @return bool
     */
    public function hasBootloaderMode()
    {
        return $this->bootloader_mode !== null;
    }

    /**
     * Get 'bootloader_mode' value
     *
     * @return bool
     */
    public function getBootloaderMode()
    {
        return $this->bootloader_mode;
    }

    /**
     * Set 'bootloader_mode' value
     *
     * @param bool $value
     */
    public function setBootloaderMode($value = null)
    {
        $this->bootloader_mode = $value;
    }

    /**
     * Check if 'device_id' has a value
     *
     * @return bool
     */
    public function hasDeviceId()
    {
        return $this->device_id !== null;
    }

    /**
     * Get 'device_id' value
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->device_id;
    }

    /**
     * Set 'device_id' value
     *
     * @param string $value
     */
    public function setDeviceId($value = null)
    {
        $this->device_id = $value;
    }

    /**
     * Check if 'pin_protection' has a value
     *
     * @return bool
     */
    public function hasPinProtection()
    {
        return $this->pin_protection !== null;
    }

    /**
     * Get 'pin_protection' value
     *
     * @return bool
     */
    public function getPinProtection()
    {
        return $this->pin_protection;
    }

    /**
     * Set 'pin_protection' value
     *
     * @param bool $value
     */
    public function setPinProtection($value = null)
    {
        $this->pin_protection = $value;
    }

    /**
     * Check if 'passphrase_protection' has a value
     *
     * @return bool
     */
    public function hasPassphraseProtection()
    {
        return $this->passphrase_protection !== null;
    }

    /**
     * Get 'passphrase_protection' value
     *
     * @return bool
     */
    public function getPassphraseProtection()
    {
        return $this->passphrase_protection;
    }

    /**
     * Set 'passphrase_protection' value
     *
     * @param bool $value
     */
    public function setPassphraseProtection($value = null)
    {
        $this->passphrase_protection = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param string $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * Check if 'label' has a value
     *
     * @return bool
     */
    public function hasLabel()
    {
        return $this->label !== null;
    }

    /**
     * Get 'label' value
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * Set 'label' value
     *
     * @param string $value
     */
    public function setLabel($value = null)
    {
        $this->label = $value;
    }

    /**
     * Check if 'coins' has a value
     *
     * @return bool
     */
    public function hasCoinsList()
    {
        return $this->coins !== null;
    }

    /**
     * Get 'coins' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\CoinType>
     */
    public function getCoinsList()
    {
        return $this->coins;
    }

    /**
     * Set 'coins' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\CoinType> $value
     */
    public function setCoinsList(\Protobuf\Collection $value = null)
    {
        $this->coins = $value;
    }

    /**
     * Add a new element to 'coins'
     *
     * @param \BitWasp\TrezorProto\CoinType $value
     */
    public function addCoins(\BitWasp\TrezorProto\CoinType $value)
    {
        if ($this->coins === null) {
            $this->coins = new \Protobuf\MessageCollection();
        }

        $this->coins->add($value);
    }

    /**
     * Check if 'initialized' has a value
     *
     * @return bool
     */
    public function hasInitialized()
    {
        return $this->initialized !== null;
    }

    /**
     * Get 'initialized' value
     *
     * @return bool
     */
    public function getInitialized()
    {
        return $this->initialized;
    }

    /**
     * Set 'initialized' value
     *
     * @param bool $value
     */
    public function setInitialized($value = null)
    {
        $this->initialized = $value;
    }

    /**
     * Check if 'revision' has a value
     *
     * @return bool
     */
    public function hasRevision()
    {
        return $this->revision !== null;
    }

    /**
     * Get 'revision' value
     *
     * @return \Protobuf\Stream
     */
    public function getRevision()
    {
        return $this->revision;
    }

    /**
     * Set 'revision' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setRevision($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->revision = $value;
    }

    /**
     * Check if 'bootloader_hash' has a value
     *
     * @return bool
     */
    public function hasBootloaderHash()
    {
        return $this->bootloader_hash !== null;
    }

    /**
     * Get 'bootloader_hash' value
     *
     * @return \Protobuf\Stream
     */
    public function getBootloaderHash()
    {
        return $this->bootloader_hash;
    }

    /**
     * Set 'bootloader_hash' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setBootloaderHash($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->bootloader_hash = $value;
    }

    /**
     * Check if 'imported' has a value
     *
     * @return bool
     */
    public function hasImported()
    {
        return $this->imported !== null;
    }

    /**
     * Get 'imported' value
     *
     * @return bool
     */
    public function getImported()
    {
        return $this->imported;
    }

    /**
     * Set 'imported' value
     *
     * @param bool $value
     */
    public function setImported($value = null)
    {
        $this->imported = $value;
    }

    /**
     * Check if 'pin_cached' has a value
     *
     * @return bool
     */
    public function hasPinCached()
    {
        return $this->pin_cached !== null;
    }

    /**
     * Get 'pin_cached' value
     *
     * @return bool
     */
    public function getPinCached()
    {
        return $this->pin_cached;
    }

    /**
     * Set 'pin_cached' value
     *
     * @param bool $value
     */
    public function setPinCached($value = null)
    {
        $this->pin_cached = $value;
    }

    /**
     * Check if 'passphrase_cached' has a value
     *
     * @return bool
     */
    public function hasPassphraseCached()
    {
        return $this->passphrase_cached !== null;
    }

    /**
     * Get 'passphrase_cached' value
     *
     * @return bool
     */
    public function getPassphraseCached()
    {
        return $this->passphrase_cached;
    }

    /**
     * Set 'passphrase_cached' value
     *
     * @param bool $value
     */
    public function setPassphraseCached($value = null)
    {
        $this->passphrase_cached = $value;
    }

    /**
     * Check if 'firmware_present' has a value
     *
     * @return bool
     */
    public function hasFirmwarePresent()
    {
        return $this->firmware_present !== null;
    }

    /**
     * Get 'firmware_present' value
     *
     * @return bool
     */
    public function getFirmwarePresent()
    {
        return $this->firmware_present;
    }

    /**
     * Set 'firmware_present' value
     *
     * @param bool $value
     */
    public function setFirmwarePresent($value = null)
    {
        $this->firmware_present = $value;
    }

    /**
     * Check if 'needs_backup' has a value
     *
     * @return bool
     */
    public function hasNeedsBackup()
    {
        return $this->needs_backup !== null;
    }

    /**
     * Get 'needs_backup' value
     *
     * @return bool
     */
    public function getNeedsBackup()
    {
        return $this->needs_backup;
    }

    /**
     * Set 'needs_backup' value
     *
     * @param bool $value
     */
    public function setNeedsBackup($value = null)
    {
        $this->needs_backup = $value;
    }

    /**
     * Check if 'flags' has a value
     *
     * @return bool
     */
    public function hasFlags()
    {
        return $this->flags !== null;
    }

    /**
     * Get 'flags' value
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->flags;
    }

    /**
     * Set 'flags' value
     *
     * @param int $value
     */
    public function setFlags($value = null)
    {
        $this->flags = $value;
    }

    /**
     * Check if 'model' has a value
     *
     * @return bool
     */
    public function hasModel()
    {
        return $this->model !== null;
    }

    /**
     * Get 'model' value
     *
     * @return string
     */
    public function getModel()
    {
        return $this->model;
    }

    /**
     * Set 'model' value
     *
     * @param string $value
     */
    public function setModel($value = null)
    {
        $this->model = $value;
    }

    /**
     * Check if 'fw_major' has a value
     *
     * @return bool
     */
    public function hasFwMajor()
    {
        return $this->fw_major !== null;
    }

    /**
     * Get 'fw_major' value
     *
     * @return int
     */
    public function getFwMajor()
    {
        return $this->fw_major;
    }

    /**
     * Set 'fw_major' value
     *
     * @param int $value
     */
    public function setFwMajor($value = null)
    {
        $this->fw_major = $value;
    }

    /**
     * Check if 'fw_minor' has a value
     *
     * @return bool
     */
    public function hasFwMinor()
    {
        return $this->fw_minor !== null;
    }

    /**
     * Get 'fw_minor' value
     *
     * @return int
     */
    public function getFwMinor()
    {
        return $this->fw_minor;
    }

    /**
     * Set 'fw_minor' value
     *
     * @param int $value
     */
    public function setFwMinor($value = null)
    {
        $this->fw_minor = $value;
    }

    /**
     * Check if 'fw_patch' has a value
     *
     * @return bool
     */
    public function hasFwPatch()
    {
        return $this->fw_patch !== null;
    }

    /**
     * Get 'fw_patch' value
     *
     * @return int
     */
    public function getFwPatch()
    {
        return $this->fw_patch;
    }

    /**
     * Set 'fw_patch' value
     *
     * @param int $value
     */
    public function setFwPatch($value = null)
    {
        $this->fw_patch = $value;
    }

    /**
     * Check if 'fw_vendor' has a value
     *
     * @return bool
     */
    public function hasFwVendor()
    {
        return $this->fw_vendor !== null;
    }

    /**
     * Get 'fw_vendor' value
     *
     * @return string
     */
    public function getFwVendor()
    {
        return $this->fw_vendor;
    }

    /**
     * Set 'fw_vendor' value
     *
     * @param string $value
     */
    public function setFwVendor($value = null)
    {
        $this->fw_vendor = $value;
    }

    /**
     * Check if 'fw_vendor_keys' has a value
     *
     * @return bool
     */
    public function hasFwVendorKeys()
    {
        return $this->fw_vendor_keys !== null;
    }

    /**
     * Get 'fw_vendor_keys' value
     *
     * @return \Protobuf\Stream
     */
    public function getFwVendorKeys()
    {
        return $this->fw_vendor_keys;
    }

    /**
     * Set 'fw_vendor_keys' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setFwVendorKeys($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->fw_vendor_keys = $value;
    }

    /**
     * Check if 'unfinished_backup' has a value
     *
     * @return bool
     */
    public function hasUnfinishedBackup()
    {
        return $this->unfinished_backup !== null;
    }

    /**
     * Get 'unfinished_backup' value
     *
     * @return bool
     */
    public function getUnfinishedBackup()
    {
        return $this->unfinished_backup;
    }

    /**
     * Set 'unfinished_backup' value
     *
     * @param bool $value
     */
    public function setUnfinishedBackup($value = null)
    {
        $this->unfinished_backup = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'vendor' => null,
            'major_version' => null,
            'minor_version' => null,
            'patch_version' => null,
            'bootloader_mode' => null,
            'device_id' => null,
            'pin_protection' => null,
            'passphrase_protection' => null,
            'language' => null,
            'label' => null,
            'coins' => [],
            'initialized' => null,
            'revision' => null,
            'bootloader_hash' => null,
            'imported' => null,
            'pin_cached' => null,
            'passphrase_cached' => null,
            'firmware_present' => null,
            'needs_backup' => null,
            'flags' => null,
            'model' => null,
            'fw_major' => null,
            'fw_minor' => null,
            'fw_patch' => null,
            'fw_vendor' => null,
            'fw_vendor_keys' => null,
            'unfinished_backup' => null
        ], $values);

        $message->setVendor($values['vendor']);
        $message->setMajorVersion($values['major_version']);
        $message->setMinorVersion($values['minor_version']);
        $message->setPatchVersion($values['patch_version']);
        $message->setBootloaderMode($values['bootloader_mode']);
        $message->setDeviceId($values['device_id']);
        $message->setPinProtection($values['pin_protection']);
        $message->setPassphraseProtection($values['passphrase_protection']);
        $message->setLanguage($values['language']);
        $message->setLabel($values['label']);
        $message->setInitialized($values['initialized']);
        $message->setRevision($values['revision']);
        $message->setBootloaderHash($values['bootloader_hash']);
        $message->setImported($values['imported']);
        $message->setPinCached($values['pin_cached']);
        $message->setPassphraseCached($values['passphrase_cached']);
        $message->setFirmwarePresent($values['firmware_present']);
        $message->setNeedsBackup($values['needs_backup']);
        $message->setFlags($values['flags']);
        $message->setModel($values['model']);
        $message->setFwMajor($values['fw_major']);
        $message->setFwMinor($values['fw_minor']);
        $message->setFwPatch($values['fw_patch']);
        $message->setFwVendor($values['fw_vendor']);
        $message->setFwVendorKeys($values['fw_vendor_keys']);
        $message->setUnfinishedBackup($values['unfinished_backup']);

        foreach ($values['coins'] as $item) {
            $message->addCoins($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Features',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'vendor',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'major_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'minor_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'patch_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'bootloader_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'device_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'pin_protection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'passphrase_protection',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'label',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'coins',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.CoinType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'initialized',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'revision',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'bootloader_hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'imported',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'pin_cached',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'passphrase_cached',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'firmware_present',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'needs_backup',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'model',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'fw_major',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'fw_minor',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'fw_patch',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'fw_vendor',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'fw_vendor_keys',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'unfinished_backup',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->vendor !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->vendor);
        }

        if ($this->major_version !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->major_version);
        }

        if ($this->minor_version !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->minor_version);
        }

        if ($this->patch_version !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->patch_version);
        }

        if ($this->bootloader_mode !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->bootloader_mode);
        }

        if ($this->device_id !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->device_id);
        }

        if ($this->pin_protection !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->pin_protection);
        }

        if ($this->passphrase_protection !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->passphrase_protection);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->language);
        }

        if ($this->label !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->label);
        }

        if ($this->coins !== null) {
            foreach ($this->coins as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->initialized !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->initialized);
        }

        if ($this->revision !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeByteStream($stream, $this->revision);
        }

        if ($this->bootloader_hash !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeByteStream($stream, $this->bootloader_hash);
        }

        if ($this->imported !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->imported);
        }

        if ($this->pin_cached !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->pin_cached);
        }

        if ($this->passphrase_cached !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->passphrase_cached);
        }

        if ($this->firmware_present !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->firmware_present);
        }

        if ($this->needs_backup !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->needs_backup);
        }

        if ($this->flags !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->flags);
        }

        if ($this->model !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeString($stream, $this->model);
        }

        if ($this->fw_major !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->fw_major);
        }

        if ($this->fw_minor !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeVarint($stream, $this->fw_minor);
        }

        if ($this->fw_patch !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->fw_patch);
        }

        if ($this->fw_vendor !== null) {
            $writer->writeVarint($stream, 202);
            $writer->writeString($stream, $this->fw_vendor);
        }

        if ($this->fw_vendor_keys !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeByteStream($stream, $this->fw_vendor_keys);
        }

        if ($this->unfinished_backup !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeBool($stream, $this->unfinished_backup);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vendor = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->major_version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->minor_version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->patch_version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->bootloader_mode = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->pin_protection = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->passphrase_protection = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->language = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->label = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\CoinType();

                if ($this->coins === null) {
                    $this->coins = new \Protobuf\MessageCollection();
                }

                $this->coins->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->initialized = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->revision = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->bootloader_hash = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->imported = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->pin_cached = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->passphrase_cached = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->firmware_present = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->needs_backup = $reader->readBool($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->model = $reader->readString($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->fw_major = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->fw_minor = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->fw_patch = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->fw_vendor = $reader->readString($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->fw_vendor_keys = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->unfinished_backup = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->vendor !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vendor);
        }

        if ($this->major_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->major_version);
        }

        if ($this->minor_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->minor_version);
        }

        if ($this->patch_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->patch_version);
        }

        if ($this->bootloader_mode !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->device_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_id);
        }

        if ($this->pin_protection !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->passphrase_protection !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->language !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->language);
        }

        if ($this->label !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->label);
        }

        if ($this->coins !== null) {
            foreach ($this->coins as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->initialized !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->revision !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->revision);
        }

        if ($this->bootloader_hash !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->bootloader_hash);
        }

        if ($this->imported !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->pin_cached !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->passphrase_cached !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->firmware_present !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->needs_backup !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->flags !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->flags);
        }

        if ($this->model !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->model);
        }

        if ($this->fw_major !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->fw_major);
        }

        if ($this->fw_minor !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->fw_minor);
        }

        if ($this->fw_patch !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->fw_patch);
        }

        if ($this->fw_vendor !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->fw_vendor);
        }

        if ($this->fw_vendor_keys !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->fw_vendor_keys);
        }

        if ($this->unfinished_backup !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->vendor = null;
        $this->major_version = null;
        $this->minor_version = null;
        $this->patch_version = null;
        $this->bootloader_mode = null;
        $this->device_id = null;
        $this->pin_protection = null;
        $this->passphrase_protection = null;
        $this->language = null;
        $this->label = null;
        $this->coins = null;
        $this->initialized = null;
        $this->revision = null;
        $this->bootloader_hash = null;
        $this->imported = null;
        $this->pin_cached = null;
        $this->passphrase_cached = null;
        $this->firmware_present = null;
        $this->needs_backup = null;
        $this->flags = null;
        $this->model = null;
        $this->fw_major = null;
        $this->fw_minor = null;
        $this->fw_patch = null;
        $this->fw_vendor = null;
        $this->fw_vendor_keys = null;
        $this->unfinished_backup = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\Features) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->vendor = ($message->vendor !== null) ? $message->vendor : $this->vendor;
        $this->major_version = ($message->major_version !== null) ? $message->major_version : $this->major_version;
        $this->minor_version = ($message->minor_version !== null) ? $message->minor_version : $this->minor_version;
        $this->patch_version = ($message->patch_version !== null) ? $message->patch_version : $this->patch_version;
        $this->bootloader_mode = ($message->bootloader_mode !== null) ? $message->bootloader_mode : $this->bootloader_mode;
        $this->device_id = ($message->device_id !== null) ? $message->device_id : $this->device_id;
        $this->pin_protection = ($message->pin_protection !== null) ? $message->pin_protection : $this->pin_protection;
        $this->passphrase_protection = ($message->passphrase_protection !== null) ? $message->passphrase_protection : $this->passphrase_protection;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
        $this->label = ($message->label !== null) ? $message->label : $this->label;
        $this->coins = ($message->coins !== null) ? $message->coins : $this->coins;
        $this->initialized = ($message->initialized !== null) ? $message->initialized : $this->initialized;
        $this->revision = ($message->revision !== null) ? $message->revision : $this->revision;
        $this->bootloader_hash = ($message->bootloader_hash !== null) ? $message->bootloader_hash : $this->bootloader_hash;
        $this->imported = ($message->imported !== null) ? $message->imported : $this->imported;
        $this->pin_cached = ($message->pin_cached !== null) ? $message->pin_cached : $this->pin_cached;
        $this->passphrase_cached = ($message->passphrase_cached !== null) ? $message->passphrase_cached : $this->passphrase_cached;
        $this->firmware_present = ($message->firmware_present !== null) ? $message->firmware_present : $this->firmware_present;
        $this->needs_backup = ($message->needs_backup !== null) ? $message->needs_backup : $this->needs_backup;
        $this->flags = ($message->flags !== null) ? $message->flags : $this->flags;
        $this->model = ($message->model !== null) ? $message->model : $this->model;
        $this->fw_major = ($message->fw_major !== null) ? $message->fw_major : $this->fw_major;
        $this->fw_minor = ($message->fw_minor !== null) ? $message->fw_minor : $this->fw_minor;
        $this->fw_patch = ($message->fw_patch !== null) ? $message->fw_patch : $this->fw_patch;
        $this->fw_vendor = ($message->fw_vendor !== null) ? $message->fw_vendor : $this->fw_vendor;
        $this->fw_vendor_keys = ($message->fw_vendor_keys !== null) ? $message->fw_vendor_keys : $this->fw_vendor_keys;
        $this->unfinished_backup = ($message->unfinished_backup !== null) ? $message->unfinished_backup : $this->unfinished_backup;
    }


}

