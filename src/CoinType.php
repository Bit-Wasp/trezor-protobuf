<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.CoinType
 */
class CoinType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * coin_name optional string = 1
     *
     * @var string
     */
    protected $coin_name = null;

    /**
     * coin_shortcut optional string = 2
     *
     * @var string
     */
    protected $coin_shortcut = null;

    /**
     * address_type optional uint32 = 3
     *
     * @var int
     */
    protected $address_type = null;

    /**
     * maxfee_kb optional uint64 = 4
     *
     * @var int
     */
    protected $maxfee_kb = null;

    /**
     * address_type_p2sh optional uint32 = 5
     *
     * @var int
     */
    protected $address_type_p2sh = null;

    /**
     * signed_message_header optional string = 8
     *
     * @var string
     */
    protected $signed_message_header = null;

    /**
     * xpub_magic optional uint32 = 9
     *
     * @var int
     */
    protected $xpub_magic = null;

    /**
     * xprv_magic optional uint32 = 10
     *
     * @var int
     */
    protected $xprv_magic = null;

    /**
     * segwit optional bool = 11
     *
     * @var bool
     */
    protected $segwit = null;

    /**
     * forkid optional uint32 = 12
     *
     * @var int
     */
    protected $forkid = null;

    /**
     * force_bip143 optional bool = 13
     *
     * @var bool
     */
    protected $force_bip143 = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->address_type = '0';
        $this->address_type_p2sh = '5';
        $this->xpub_magic = '76067358';
        $this->xprv_magic = '76066276';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'coin_name' has a value
     *
     * @return bool
     */
    public function hasCoinName()
    {
        return $this->coin_name !== null;
    }

    /**
     * Get 'coin_name' value
     *
     * @return string
     */
    public function getCoinName()
    {
        return $this->coin_name;
    }

    /**
     * Set 'coin_name' value
     *
     * @param string $value
     */
    public function setCoinName($value = null)
    {
        $this->coin_name = $value;
    }

    /**
     * Check if 'coin_shortcut' has a value
     *
     * @return bool
     */
    public function hasCoinShortcut()
    {
        return $this->coin_shortcut !== null;
    }

    /**
     * Get 'coin_shortcut' value
     *
     * @return string
     */
    public function getCoinShortcut()
    {
        return $this->coin_shortcut;
    }

    /**
     * Set 'coin_shortcut' value
     *
     * @param string $value
     */
    public function setCoinShortcut($value = null)
    {
        $this->coin_shortcut = $value;
    }

    /**
     * Check if 'address_type' has a value
     *
     * @return bool
     */
    public function hasAddressType()
    {
        return $this->address_type !== null;
    }

    /**
     * Get 'address_type' value
     *
     * @return int
     */
    public function getAddressType()
    {
        return $this->address_type;
    }

    /**
     * Set 'address_type' value
     *
     * @param int $value
     */
    public function setAddressType($value = null)
    {
        $this->address_type = $value;
    }

    /**
     * Check if 'maxfee_kb' has a value
     *
     * @return bool
     */
    public function hasMaxfeeKb()
    {
        return $this->maxfee_kb !== null;
    }

    /**
     * Get 'maxfee_kb' value
     *
     * @return int
     */
    public function getMaxfeeKb()
    {
        return $this->maxfee_kb;
    }

    /**
     * Set 'maxfee_kb' value
     *
     * @param int $value
     */
    public function setMaxfeeKb($value = null)
    {
        $this->maxfee_kb = $value;
    }

    /**
     * Check if 'address_type_p2sh' has a value
     *
     * @return bool
     */
    public function hasAddressTypeP2sh()
    {
        return $this->address_type_p2sh !== null;
    }

    /**
     * Get 'address_type_p2sh' value
     *
     * @return int
     */
    public function getAddressTypeP2sh()
    {
        return $this->address_type_p2sh;
    }

    /**
     * Set 'address_type_p2sh' value
     *
     * @param int $value
     */
    public function setAddressTypeP2sh($value = null)
    {
        $this->address_type_p2sh = $value;
    }

    /**
     * Check if 'signed_message_header' has a value
     *
     * @return bool
     */
    public function hasSignedMessageHeader()
    {
        return $this->signed_message_header !== null;
    }

    /**
     * Get 'signed_message_header' value
     *
     * @return string
     */
    public function getSignedMessageHeader()
    {
        return $this->signed_message_header;
    }

    /**
     * Set 'signed_message_header' value
     *
     * @param string $value
     */
    public function setSignedMessageHeader($value = null)
    {
        $this->signed_message_header = $value;
    }

    /**
     * Check if 'xpub_magic' has a value
     *
     * @return bool
     */
    public function hasXpubMagic()
    {
        return $this->xpub_magic !== null;
    }

    /**
     * Get 'xpub_magic' value
     *
     * @return int
     */
    public function getXpubMagic()
    {
        return $this->xpub_magic;
    }

    /**
     * Set 'xpub_magic' value
     *
     * @param int $value
     */
    public function setXpubMagic($value = null)
    {
        $this->xpub_magic = $value;
    }

    /**
     * Check if 'xprv_magic' has a value
     *
     * @return bool
     */
    public function hasXprvMagic()
    {
        return $this->xprv_magic !== null;
    }

    /**
     * Get 'xprv_magic' value
     *
     * @return int
     */
    public function getXprvMagic()
    {
        return $this->xprv_magic;
    }

    /**
     * Set 'xprv_magic' value
     *
     * @param int $value
     */
    public function setXprvMagic($value = null)
    {
        $this->xprv_magic = $value;
    }

    /**
     * Check if 'segwit' has a value
     *
     * @return bool
     */
    public function hasSegwit()
    {
        return $this->segwit !== null;
    }

    /**
     * Get 'segwit' value
     *
     * @return bool
     */
    public function getSegwit()
    {
        return $this->segwit;
    }

    /**
     * Set 'segwit' value
     *
     * @param bool $value
     */
    public function setSegwit($value = null)
    {
        $this->segwit = $value;
    }

    /**
     * Check if 'forkid' has a value
     *
     * @return bool
     */
    public function hasForkid()
    {
        return $this->forkid !== null;
    }

    /**
     * Get 'forkid' value
     *
     * @return int
     */
    public function getForkid()
    {
        return $this->forkid;
    }

    /**
     * Set 'forkid' value
     *
     * @param int $value
     */
    public function setForkid($value = null)
    {
        $this->forkid = $value;
    }

    /**
     * Check if 'force_bip143' has a value
     *
     * @return bool
     */
    public function hasForceBip143()
    {
        return $this->force_bip143 !== null;
    }

    /**
     * Get 'force_bip143' value
     *
     * @return bool
     */
    public function getForceBip143()
    {
        return $this->force_bip143;
    }

    /**
     * Set 'force_bip143' value
     *
     * @param bool $value
     */
    public function setForceBip143($value = null)
    {
        $this->force_bip143 = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'coin_name' => null,
            'coin_shortcut' => null,
            'address_type' => '0',
            'maxfee_kb' => null,
            'address_type_p2sh' => '5',
            'signed_message_header' => null,
            'xpub_magic' => '76067358',
            'xprv_magic' => '76066276',
            'segwit' => null,
            'forkid' => null,
            'force_bip143' => null
        ], $values);

        $message->setCoinName($values['coin_name']);
        $message->setCoinShortcut($values['coin_shortcut']);
        $message->setAddressType($values['address_type']);
        $message->setMaxfeeKb($values['maxfee_kb']);
        $message->setAddressTypeP2sh($values['address_type_p2sh']);
        $message->setSignedMessageHeader($values['signed_message_header']);
        $message->setXpubMagic($values['xpub_magic']);
        $message->setXprvMagic($values['xprv_magic']);
        $message->setSegwit($values['segwit']);
        $message->setForkid($values['forkid']);
        $message->setForceBip143($values['force_bip143']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CoinType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'coin_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'coin_shortcut',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'address_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'maxfee_kb',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'address_type_p2sh',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '5'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'signed_message_header',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'xpub_magic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '76067358'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'xprv_magic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '76066276'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'segwit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'forkid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'force_bip143',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->coin_name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->coin_name);
        }

        if ($this->coin_shortcut !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->coin_shortcut);
        }

        if ($this->address_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->address_type);
        }

        if ($this->maxfee_kb !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->maxfee_kb);
        }

        if ($this->address_type_p2sh !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->address_type_p2sh);
        }

        if ($this->signed_message_header !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->signed_message_header);
        }

        if ($this->xpub_magic !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->xpub_magic);
        }

        if ($this->xprv_magic !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->xprv_magic);
        }

        if ($this->segwit !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->segwit);
        }

        if ($this->forkid !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->forkid);
        }

        if ($this->force_bip143 !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->force_bip143);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->coin_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->coin_shortcut = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->address_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->maxfee_kb = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->address_type_p2sh = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->signed_message_header = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->xpub_magic = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->xprv_magic = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->segwit = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->forkid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->force_bip143 = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->coin_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->coin_name);
        }

        if ($this->coin_shortcut !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->coin_shortcut);
        }

        if ($this->address_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->address_type);
        }

        if ($this->maxfee_kb !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->maxfee_kb);
        }

        if ($this->address_type_p2sh !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->address_type_p2sh);
        }

        if ($this->signed_message_header !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->signed_message_header);
        }

        if ($this->xpub_magic !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->xpub_magic);
        }

        if ($this->xprv_magic !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->xprv_magic);
        }

        if ($this->segwit !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->forkid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->forkid);
        }

        if ($this->force_bip143 !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->coin_name = null;
        $this->coin_shortcut = null;
        $this->address_type = '0';
        $this->maxfee_kb = null;
        $this->address_type_p2sh = '5';
        $this->signed_message_header = null;
        $this->xpub_magic = '76067358';
        $this->xprv_magic = '76066276';
        $this->segwit = null;
        $this->forkid = null;
        $this->force_bip143 = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\CoinType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->coin_name = ($message->coin_name !== null) ? $message->coin_name : $this->coin_name;
        $this->coin_shortcut = ($message->coin_shortcut !== null) ? $message->coin_shortcut : $this->coin_shortcut;
        $this->address_type = ($message->address_type !== null) ? $message->address_type : $this->address_type;
        $this->maxfee_kb = ($message->maxfee_kb !== null) ? $message->maxfee_kb : $this->maxfee_kb;
        $this->address_type_p2sh = ($message->address_type_p2sh !== null) ? $message->address_type_p2sh : $this->address_type_p2sh;
        $this->signed_message_header = ($message->signed_message_header !== null) ? $message->signed_message_header : $this->signed_message_header;
        $this->xpub_magic = ($message->xpub_magic !== null) ? $message->xpub_magic : $this->xpub_magic;
        $this->xprv_magic = ($message->xprv_magic !== null) ? $message->xprv_magic : $this->xprv_magic;
        $this->segwit = ($message->segwit !== null) ? $message->segwit : $this->segwit;
        $this->forkid = ($message->forkid !== null) ? $message->forkid : $this->forkid;
        $this->force_bip143 = ($message->force_bip143 !== null) ? $message->force_bip143 : $this->force_bip143;
    }


}

