<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf enum : BitWasp.TrezorProto.FailureType
 */
class FailureType extends \Protobuf\Enum
{

    /**
     * Failure_UnexpectedMessage = 1
     */
    const Failure_UnexpectedMessage_VALUE = 1;

    /**
     * Failure_ButtonExpected = 2
     */
    const Failure_ButtonExpected_VALUE = 2;

    /**
     * Failure_DataError = 3
     */
    const Failure_DataError_VALUE = 3;

    /**
     * Failure_ActionCancelled = 4
     */
    const Failure_ActionCancelled_VALUE = 4;

    /**
     * Failure_PinExpected = 5
     */
    const Failure_PinExpected_VALUE = 5;

    /**
     * Failure_PinCancelled = 6
     */
    const Failure_PinCancelled_VALUE = 6;

    /**
     * Failure_PinInvalid = 7
     */
    const Failure_PinInvalid_VALUE = 7;

    /**
     * Failure_InvalidSignature = 8
     */
    const Failure_InvalidSignature_VALUE = 8;

    /**
     * Failure_ProcessError = 9
     */
    const Failure_ProcessError_VALUE = 9;

    /**
     * Failure_NotEnoughFunds = 10
     */
    const Failure_NotEnoughFunds_VALUE = 10;

    /**
     * Failure_NotInitialized = 11
     */
    const Failure_NotInitialized_VALUE = 11;

    /**
     * Failure_PinMismatch = 12
     */
    const Failure_PinMismatch_VALUE = 12;

    /**
     * Failure_FirmwareError = 99
     */
    const Failure_FirmwareError_VALUE = 99;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_UnexpectedMessage = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_ButtonExpected = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_DataError = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_ActionCancelled = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_PinExpected = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_PinCancelled = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_PinInvalid = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_InvalidSignature = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_ProcessError = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_NotEnoughFunds = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_NotInitialized = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_PinMismatch = null;

    /**
     * @var \BitWasp\TrezorProto\FailureType
     */
    protected static $Failure_FirmwareError = null;

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_UnexpectedMessage()
    {
        if (self::$Failure_UnexpectedMessage !== null) {
            return self::$Failure_UnexpectedMessage;
        }

        return self::$Failure_UnexpectedMessage = new self('Failure_UnexpectedMessage', self::Failure_UnexpectedMessage_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_ButtonExpected()
    {
        if (self::$Failure_ButtonExpected !== null) {
            return self::$Failure_ButtonExpected;
        }

        return self::$Failure_ButtonExpected = new self('Failure_ButtonExpected', self::Failure_ButtonExpected_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_DataError()
    {
        if (self::$Failure_DataError !== null) {
            return self::$Failure_DataError;
        }

        return self::$Failure_DataError = new self('Failure_DataError', self::Failure_DataError_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_ActionCancelled()
    {
        if (self::$Failure_ActionCancelled !== null) {
            return self::$Failure_ActionCancelled;
        }

        return self::$Failure_ActionCancelled = new self('Failure_ActionCancelled', self::Failure_ActionCancelled_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_PinExpected()
    {
        if (self::$Failure_PinExpected !== null) {
            return self::$Failure_PinExpected;
        }

        return self::$Failure_PinExpected = new self('Failure_PinExpected', self::Failure_PinExpected_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_PinCancelled()
    {
        if (self::$Failure_PinCancelled !== null) {
            return self::$Failure_PinCancelled;
        }

        return self::$Failure_PinCancelled = new self('Failure_PinCancelled', self::Failure_PinCancelled_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_PinInvalid()
    {
        if (self::$Failure_PinInvalid !== null) {
            return self::$Failure_PinInvalid;
        }

        return self::$Failure_PinInvalid = new self('Failure_PinInvalid', self::Failure_PinInvalid_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_InvalidSignature()
    {
        if (self::$Failure_InvalidSignature !== null) {
            return self::$Failure_InvalidSignature;
        }

        return self::$Failure_InvalidSignature = new self('Failure_InvalidSignature', self::Failure_InvalidSignature_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_ProcessError()
    {
        if (self::$Failure_ProcessError !== null) {
            return self::$Failure_ProcessError;
        }

        return self::$Failure_ProcessError = new self('Failure_ProcessError', self::Failure_ProcessError_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_NotEnoughFunds()
    {
        if (self::$Failure_NotEnoughFunds !== null) {
            return self::$Failure_NotEnoughFunds;
        }

        return self::$Failure_NotEnoughFunds = new self('Failure_NotEnoughFunds', self::Failure_NotEnoughFunds_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_NotInitialized()
    {
        if (self::$Failure_NotInitialized !== null) {
            return self::$Failure_NotInitialized;
        }

        return self::$Failure_NotInitialized = new self('Failure_NotInitialized', self::Failure_NotInitialized_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_PinMismatch()
    {
        if (self::$Failure_PinMismatch !== null) {
            return self::$Failure_PinMismatch;
        }

        return self::$Failure_PinMismatch = new self('Failure_PinMismatch', self::Failure_PinMismatch_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function Failure_FirmwareError()
    {
        if (self::$Failure_FirmwareError !== null) {
            return self::$Failure_FirmwareError;
        }

        return self::$Failure_FirmwareError = new self('Failure_FirmwareError', self::Failure_FirmwareError_VALUE);
    }

    /**
     * @param int $value
     * @return \BitWasp\TrezorProto\FailureType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::Failure_UnexpectedMessage();
            case 2: return self::Failure_ButtonExpected();
            case 3: return self::Failure_DataError();
            case 4: return self::Failure_ActionCancelled();
            case 5: return self::Failure_PinExpected();
            case 6: return self::Failure_PinCancelled();
            case 7: return self::Failure_PinInvalid();
            case 8: return self::Failure_InvalidSignature();
            case 9: return self::Failure_ProcessError();
            case 10: return self::Failure_NotEnoughFunds();
            case 11: return self::Failure_NotInitialized();
            case 12: return self::Failure_PinMismatch();
            case 99: return self::Failure_FirmwareError();
            default: return null;
        }
    }


}

