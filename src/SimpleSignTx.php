<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.SimpleSignTx
 */
class SimpleSignTx extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * inputs repeated message = 1
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\TxInputType>
     */
    protected $inputs = null;

    /**
     * outputs repeated message = 2
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputType>
     */
    protected $outputs = null;

    /**
     * transactions repeated message = 3
     *
     * @var \Protobuf\Collection<\BitWasp\TrezorProto\TransactionType>
     */
    protected $transactions = null;

    /**
     * coin_name optional string = 4
     *
     * @var string
     */
    protected $coin_name = null;

    /**
     * version optional uint32 = 5
     *
     * @var int
     */
    protected $version = null;

    /**
     * lock_time optional uint32 = 6
     *
     * @var int
     */
    protected $lock_time = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->coin_name = 'Bitcoin';
        $this->version = '1';
        $this->lock_time = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'inputs' has a value
     *
     * @return bool
     */
    public function hasInputsList()
    {
        return $this->inputs !== null;
    }

    /**
     * Get 'inputs' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\TxInputType>
     */
    public function getInputsList()
    {
        return $this->inputs;
    }

    /**
     * Set 'inputs' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\TxInputType> $value
     */
    public function setInputsList(\Protobuf\Collection $value = null)
    {
        $this->inputs = $value;
    }

    /**
     * Add a new element to 'inputs'
     *
     * @param \BitWasp\TrezorProto\TxInputType $value
     */
    public function addInputs(\BitWasp\TrezorProto\TxInputType $value)
    {
        if ($this->inputs === null) {
            $this->inputs = new \Protobuf\MessageCollection();
        }

        $this->inputs->add($value);
    }

    /**
     * Check if 'outputs' has a value
     *
     * @return bool
     */
    public function hasOutputsList()
    {
        return $this->outputs !== null;
    }

    /**
     * Get 'outputs' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputType>
     */
    public function getOutputsList()
    {
        return $this->outputs;
    }

    /**
     * Set 'outputs' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\TxOutputType> $value
     */
    public function setOutputsList(\Protobuf\Collection $value = null)
    {
        $this->outputs = $value;
    }

    /**
     * Add a new element to 'outputs'
     *
     * @param \BitWasp\TrezorProto\TxOutputType $value
     */
    public function addOutputs(\BitWasp\TrezorProto\TxOutputType $value)
    {
        if ($this->outputs === null) {
            $this->outputs = new \Protobuf\MessageCollection();
        }

        $this->outputs->add($value);
    }

    /**
     * Check if 'transactions' has a value
     *
     * @return bool
     */
    public function hasTransactionsList()
    {
        return $this->transactions !== null;
    }

    /**
     * Get 'transactions' value
     *
     * @return \Protobuf\Collection<\BitWasp\TrezorProto\TransactionType>
     */
    public function getTransactionsList()
    {
        return $this->transactions;
    }

    /**
     * Set 'transactions' value
     *
     * @param \Protobuf\Collection<\BitWasp\TrezorProto\TransactionType> $value
     */
    public function setTransactionsList(\Protobuf\Collection $value = null)
    {
        $this->transactions = $value;
    }

    /**
     * Add a new element to 'transactions'
     *
     * @param \BitWasp\TrezorProto\TransactionType $value
     */
    public function addTransactions(\BitWasp\TrezorProto\TransactionType $value)
    {
        if ($this->transactions === null) {
            $this->transactions = new \Protobuf\MessageCollection();
        }

        $this->transactions->add($value);
    }

    /**
     * Check if 'coin_name' has a value
     *
     * @return bool
     */
    public function hasCoinName()
    {
        return $this->coin_name !== null;
    }

    /**
     * Get 'coin_name' value
     *
     * @return string
     */
    public function getCoinName()
    {
        return $this->coin_name;
    }

    /**
     * Set 'coin_name' value
     *
     * @param string $value
     */
    public function setCoinName($value = null)
    {
        $this->coin_name = $value;
    }

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param int $value
     */
    public function setVersion($value = null)
    {
        $this->version = $value;
    }

    /**
     * Check if 'lock_time' has a value
     *
     * @return bool
     */
    public function hasLockTime()
    {
        return $this->lock_time !== null;
    }

    /**
     * Get 'lock_time' value
     *
     * @return int
     */
    public function getLockTime()
    {
        return $this->lock_time;
    }

    /**
     * Set 'lock_time' value
     *
     * @param int $value
     */
    public function setLockTime($value = null)
    {
        $this->lock_time = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'inputs' => [],
            'outputs' => [],
            'transactions' => [],
            'coin_name' => 'Bitcoin',
            'version' => '1',
            'lock_time' => '0'
        ], $values);

        $message->setCoinName($values['coin_name']);
        $message->setVersion($values['version']);
        $message->setLockTime($values['lock_time']);

        foreach ($values['inputs'] as $item) {
            $message->addInputs($item);
        }

        foreach ($values['outputs'] as $item) {
            $message->addOutputs($item);
        }

        foreach ($values['transactions'] as $item) {
            $message->addTransactions($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'SimpleSignTx',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'inputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.TxInputType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'outputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.TxOutputType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'transactions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.BitWasp.TrezorProto.TransactionType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'coin_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => 'Bitcoin'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'lock_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->inputs !== null) {
            foreach ($this->inputs as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->outputs !== null) {
            foreach ($this->outputs as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->transactions !== null) {
            foreach ($this->transactions as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->coin_name !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->coin_name);
        }

        if ($this->version !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->version);
        }

        if ($this->lock_time !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->lock_time);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\TxInputType();

                if ($this->inputs === null) {
                    $this->inputs = new \Protobuf\MessageCollection();
                }

                $this->inputs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\TxOutputType();

                if ($this->outputs === null) {
                    $this->outputs = new \Protobuf\MessageCollection();
                }

                $this->outputs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\TransactionType();

                if ($this->transactions === null) {
                    $this->transactions = new \Protobuf\MessageCollection();
                }

                $this->transactions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->coin_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->lock_time = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->inputs !== null) {
            foreach ($this->inputs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->outputs !== null) {
            foreach ($this->outputs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->transactions !== null) {
            foreach ($this->transactions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->coin_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->coin_name);
        }

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->version);
        }

        if ($this->lock_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->lock_time);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->inputs = null;
        $this->outputs = null;
        $this->transactions = null;
        $this->coin_name = 'Bitcoin';
        $this->version = '1';
        $this->lock_time = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\SimpleSignTx) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->inputs = ($message->inputs !== null) ? $message->inputs : $this->inputs;
        $this->outputs = ($message->outputs !== null) ? $message->outputs : $this->outputs;
        $this->transactions = ($message->transactions !== null) ? $message->transactions : $this->transactions;
        $this->coin_name = ($message->coin_name !== null) ? $message->coin_name : $this->coin_name;
        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->lock_time = ($message->lock_time !== null) ? $message->lock_time : $this->lock_time;
    }


}

