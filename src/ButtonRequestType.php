<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf enum : BitWasp.TrezorProto.ButtonRequestType
 */
class ButtonRequestType extends \Protobuf\Enum
{

    /**
     * ButtonRequest_Other = 1
     */
    const ButtonRequest_Other_VALUE = 1;

    /**
     * ButtonRequest_FeeOverThreshold = 2
     */
    const ButtonRequest_FeeOverThreshold_VALUE = 2;

    /**
     * ButtonRequest_ConfirmOutput = 3
     */
    const ButtonRequest_ConfirmOutput_VALUE = 3;

    /**
     * ButtonRequest_ResetDevice = 4
     */
    const ButtonRequest_ResetDevice_VALUE = 4;

    /**
     * ButtonRequest_ConfirmWord = 5
     */
    const ButtonRequest_ConfirmWord_VALUE = 5;

    /**
     * ButtonRequest_WipeDevice = 6
     */
    const ButtonRequest_WipeDevice_VALUE = 6;

    /**
     * ButtonRequest_ProtectCall = 7
     */
    const ButtonRequest_ProtectCall_VALUE = 7;

    /**
     * ButtonRequest_SignTx = 8
     */
    const ButtonRequest_SignTx_VALUE = 8;

    /**
     * ButtonRequest_FirmwareCheck = 9
     */
    const ButtonRequest_FirmwareCheck_VALUE = 9;

    /**
     * ButtonRequest_Address = 10
     */
    const ButtonRequest_Address_VALUE = 10;

    /**
     * ButtonRequest_PublicKey = 11
     */
    const ButtonRequest_PublicKey_VALUE = 11;

    /**
     * ButtonRequest_MnemonicWordCount = 12
     */
    const ButtonRequest_MnemonicWordCount_VALUE = 12;

    /**
     * ButtonRequest_MnemonicInput = 13
     */
    const ButtonRequest_MnemonicInput_VALUE = 13;

    /**
     * ButtonRequest_PassphraseType = 14
     */
    const ButtonRequest_PassphraseType_VALUE = 14;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_Other = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_FeeOverThreshold = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_ConfirmOutput = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_ResetDevice = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_ConfirmWord = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_WipeDevice = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_ProtectCall = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_SignTx = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_FirmwareCheck = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_Address = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_PublicKey = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_MnemonicWordCount = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_MnemonicInput = null;

    /**
     * @var \BitWasp\TrezorProto\ButtonRequestType
     */
    protected static $ButtonRequest_PassphraseType = null;

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_Other()
    {
        if (self::$ButtonRequest_Other !== null) {
            return self::$ButtonRequest_Other;
        }

        return self::$ButtonRequest_Other = new self('ButtonRequest_Other', self::ButtonRequest_Other_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_FeeOverThreshold()
    {
        if (self::$ButtonRequest_FeeOverThreshold !== null) {
            return self::$ButtonRequest_FeeOverThreshold;
        }

        return self::$ButtonRequest_FeeOverThreshold = new self('ButtonRequest_FeeOverThreshold', self::ButtonRequest_FeeOverThreshold_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_ConfirmOutput()
    {
        if (self::$ButtonRequest_ConfirmOutput !== null) {
            return self::$ButtonRequest_ConfirmOutput;
        }

        return self::$ButtonRequest_ConfirmOutput = new self('ButtonRequest_ConfirmOutput', self::ButtonRequest_ConfirmOutput_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_ResetDevice()
    {
        if (self::$ButtonRequest_ResetDevice !== null) {
            return self::$ButtonRequest_ResetDevice;
        }

        return self::$ButtonRequest_ResetDevice = new self('ButtonRequest_ResetDevice', self::ButtonRequest_ResetDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_ConfirmWord()
    {
        if (self::$ButtonRequest_ConfirmWord !== null) {
            return self::$ButtonRequest_ConfirmWord;
        }

        return self::$ButtonRequest_ConfirmWord = new self('ButtonRequest_ConfirmWord', self::ButtonRequest_ConfirmWord_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_WipeDevice()
    {
        if (self::$ButtonRequest_WipeDevice !== null) {
            return self::$ButtonRequest_WipeDevice;
        }

        return self::$ButtonRequest_WipeDevice = new self('ButtonRequest_WipeDevice', self::ButtonRequest_WipeDevice_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_ProtectCall()
    {
        if (self::$ButtonRequest_ProtectCall !== null) {
            return self::$ButtonRequest_ProtectCall;
        }

        return self::$ButtonRequest_ProtectCall = new self('ButtonRequest_ProtectCall', self::ButtonRequest_ProtectCall_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_SignTx()
    {
        if (self::$ButtonRequest_SignTx !== null) {
            return self::$ButtonRequest_SignTx;
        }

        return self::$ButtonRequest_SignTx = new self('ButtonRequest_SignTx', self::ButtonRequest_SignTx_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_FirmwareCheck()
    {
        if (self::$ButtonRequest_FirmwareCheck !== null) {
            return self::$ButtonRequest_FirmwareCheck;
        }

        return self::$ButtonRequest_FirmwareCheck = new self('ButtonRequest_FirmwareCheck', self::ButtonRequest_FirmwareCheck_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_Address()
    {
        if (self::$ButtonRequest_Address !== null) {
            return self::$ButtonRequest_Address;
        }

        return self::$ButtonRequest_Address = new self('ButtonRequest_Address', self::ButtonRequest_Address_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_PublicKey()
    {
        if (self::$ButtonRequest_PublicKey !== null) {
            return self::$ButtonRequest_PublicKey;
        }

        return self::$ButtonRequest_PublicKey = new self('ButtonRequest_PublicKey', self::ButtonRequest_PublicKey_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_MnemonicWordCount()
    {
        if (self::$ButtonRequest_MnemonicWordCount !== null) {
            return self::$ButtonRequest_MnemonicWordCount;
        }

        return self::$ButtonRequest_MnemonicWordCount = new self('ButtonRequest_MnemonicWordCount', self::ButtonRequest_MnemonicWordCount_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_MnemonicInput()
    {
        if (self::$ButtonRequest_MnemonicInput !== null) {
            return self::$ButtonRequest_MnemonicInput;
        }

        return self::$ButtonRequest_MnemonicInput = new self('ButtonRequest_MnemonicInput', self::ButtonRequest_MnemonicInput_VALUE);
    }

    /**
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function ButtonRequest_PassphraseType()
    {
        if (self::$ButtonRequest_PassphraseType !== null) {
            return self::$ButtonRequest_PassphraseType;
        }

        return self::$ButtonRequest_PassphraseType = new self('ButtonRequest_PassphraseType', self::ButtonRequest_PassphraseType_VALUE);
    }

    /**
     * @param int $value
     * @return \BitWasp\TrezorProto\ButtonRequestType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::ButtonRequest_Other();
            case 2: return self::ButtonRequest_FeeOverThreshold();
            case 3: return self::ButtonRequest_ConfirmOutput();
            case 4: return self::ButtonRequest_ResetDevice();
            case 5: return self::ButtonRequest_ConfirmWord();
            case 6: return self::ButtonRequest_WipeDevice();
            case 7: return self::ButtonRequest_ProtectCall();
            case 8: return self::ButtonRequest_SignTx();
            case 9: return self::ButtonRequest_FirmwareCheck();
            case 10: return self::ButtonRequest_Address();
            case 11: return self::ButtonRequest_PublicKey();
            case 12: return self::ButtonRequest_MnemonicWordCount();
            case 13: return self::ButtonRequest_MnemonicInput();
            case 14: return self::ButtonRequest_PassphraseType();
            default: return null;
        }
    }


}

