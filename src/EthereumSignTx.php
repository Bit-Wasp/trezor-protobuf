<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : messages.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.EthereumSignTx
 */
class EthereumSignTx extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * address_n repeated uint32 = 1
     *
     * @var \Protobuf\Collection
     */
    protected $address_n = null;

    /**
     * nonce optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $nonce = null;

    /**
     * gas_price optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $gas_price = null;

    /**
     * gas_limit optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $gas_limit = null;

    /**
     * to optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $to = null;

    /**
     * value optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $value = null;

    /**
     * data_initial_chunk optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $data_initial_chunk = null;

    /**
     * data_length optional uint32 = 8
     *
     * @var int
     */
    protected $data_length = null;

    /**
     * chain_id optional uint32 = 9
     *
     * @var int
     */
    protected $chain_id = null;

    /**
     * tx_type optional uint32 = 10
     *
     * @var int
     */
    protected $tx_type = null;

    /**
     * Check if 'address_n' has a value
     *
     * @return bool
     */
    public function hasAddressNList()
    {
        return $this->address_n !== null;
    }

    /**
     * Get 'address_n' value
     *
     * @return \Protobuf\Collection
     */
    public function getAddressNList()
    {
        return $this->address_n;
    }

    /**
     * Set 'address_n' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAddressNList(\Protobuf\Collection $value = null)
    {
        $this->address_n = $value;
    }

    /**
     * Add a new element to 'address_n'
     *
     * @param int $value
     */
    public function addAddressN($value)
    {
        if ($this->address_n === null) {
            $this->address_n = new \Protobuf\ScalarCollection();
        }

        $this->address_n->add($value);
    }

    /**
     * Check if 'nonce' has a value
     *
     * @return bool
     */
    public function hasNonce()
    {
        return $this->nonce !== null;
    }

    /**
     * Get 'nonce' value
     *
     * @return \Protobuf\Stream
     */
    public function getNonce()
    {
        return $this->nonce;
    }

    /**
     * Set 'nonce' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setNonce($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->nonce = $value;
    }

    /**
     * Check if 'gas_price' has a value
     *
     * @return bool
     */
    public function hasGasPrice()
    {
        return $this->gas_price !== null;
    }

    /**
     * Get 'gas_price' value
     *
     * @return \Protobuf\Stream
     */
    public function getGasPrice()
    {
        return $this->gas_price;
    }

    /**
     * Set 'gas_price' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGasPrice($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->gas_price = $value;
    }

    /**
     * Check if 'gas_limit' has a value
     *
     * @return bool
     */
    public function hasGasLimit()
    {
        return $this->gas_limit !== null;
    }

    /**
     * Get 'gas_limit' value
     *
     * @return \Protobuf\Stream
     */
    public function getGasLimit()
    {
        return $this->gas_limit;
    }

    /**
     * Set 'gas_limit' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGasLimit($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->gas_limit = $value;
    }

    /**
     * Check if 'to' has a value
     *
     * @return bool
     */
    public function hasTo()
    {
        return $this->to !== null;
    }

    /**
     * Get 'to' value
     *
     * @return \Protobuf\Stream
     */
    public function getTo()
    {
        return $this->to;
    }

    /**
     * Set 'to' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setTo($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->to = $value;
    }

    /**
     * Check if 'value' has a value
     *
     * @return bool
     */
    public function hasValue()
    {
        return $this->value !== null;
    }

    /**
     * Get 'value' value
     *
     * @return \Protobuf\Stream
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Set 'value' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setValue($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->value = $value;
    }

    /**
     * Check if 'data_initial_chunk' has a value
     *
     * @return bool
     */
    public function hasDataInitialChunk()
    {
        return $this->data_initial_chunk !== null;
    }

    /**
     * Get 'data_initial_chunk' value
     *
     * @return \Protobuf\Stream
     */
    public function getDataInitialChunk()
    {
        return $this->data_initial_chunk;
    }

    /**
     * Set 'data_initial_chunk' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setDataInitialChunk($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->data_initial_chunk = $value;
    }

    /**
     * Check if 'data_length' has a value
     *
     * @return bool
     */
    public function hasDataLength()
    {
        return $this->data_length !== null;
    }

    /**
     * Get 'data_length' value
     *
     * @return int
     */
    public function getDataLength()
    {
        return $this->data_length;
    }

    /**
     * Set 'data_length' value
     *
     * @param int $value
     */
    public function setDataLength($value = null)
    {
        $this->data_length = $value;
    }

    /**
     * Check if 'chain_id' has a value
     *
     * @return bool
     */
    public function hasChainId()
    {
        return $this->chain_id !== null;
    }

    /**
     * Get 'chain_id' value
     *
     * @return int
     */
    public function getChainId()
    {
        return $this->chain_id;
    }

    /**
     * Set 'chain_id' value
     *
     * @param int $value
     */
    public function setChainId($value = null)
    {
        $this->chain_id = $value;
    }

    /**
     * Check if 'tx_type' has a value
     *
     * @return bool
     */
    public function hasTxType()
    {
        return $this->tx_type !== null;
    }

    /**
     * Get 'tx_type' value
     *
     * @return int
     */
    public function getTxType()
    {
        return $this->tx_type;
    }

    /**
     * Set 'tx_type' value
     *
     * @param int $value
     */
    public function setTxType($value = null)
    {
        $this->tx_type = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'address_n' => [],
            'nonce' => null,
            'gas_price' => null,
            'gas_limit' => null,
            'to' => null,
            'value' => null,
            'data_initial_chunk' => null,
            'data_length' => null,
            'chain_id' => null,
            'tx_type' => null
        ], $values);

        $message->setNonce($values['nonce']);
        $message->setGasPrice($values['gas_price']);
        $message->setGasLimit($values['gas_limit']);
        $message->setTo($values['to']);
        $message->setValue($values['value']);
        $message->setDataInitialChunk($values['data_initial_chunk']);
        $message->setDataLength($values['data_length']);
        $message->setChainId($values['chain_id']);
        $message->setTxType($values['tx_type']);

        foreach ($values['address_n'] as $item) {
            $message->addAddressN($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EthereumSignTx',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'address_n',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'nonce',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'gas_price',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'gas_limit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'to',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'data_initial_chunk',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'data_length',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'chain_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'tx_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->address_n !== null) {
            foreach ($this->address_n as $val) {
                $writer->writeVarint($stream, 8);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->nonce !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->nonce);
        }

        if ($this->gas_price !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->gas_price);
        }

        if ($this->gas_limit !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->gas_limit);
        }

        if ($this->to !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->to);
        }

        if ($this->value !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->value);
        }

        if ($this->data_initial_chunk !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->data_initial_chunk);
        }

        if ($this->data_length !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->data_length);
        }

        if ($this->chain_id !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->chain_id);
        }

        if ($this->tx_type !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->tx_type);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->address_n === null) {
                    $this->address_n = new \Protobuf\ScalarCollection();
                }

                $this->address_n->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->nonce = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->gas_price = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->gas_limit = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->to = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->value = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->data_initial_chunk = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->data_length = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->chain_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->tx_type = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->address_n !== null) {
            foreach ($this->address_n as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->nonce !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->nonce);
        }

        if ($this->gas_price !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->gas_price);
        }

        if ($this->gas_limit !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->gas_limit);
        }

        if ($this->to !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->to);
        }

        if ($this->value !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->value);
        }

        if ($this->data_initial_chunk !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->data_initial_chunk);
        }

        if ($this->data_length !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->data_length);
        }

        if ($this->chain_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->chain_id);
        }

        if ($this->tx_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->tx_type);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->address_n = null;
        $this->nonce = null;
        $this->gas_price = null;
        $this->gas_limit = null;
        $this->to = null;
        $this->value = null;
        $this->data_initial_chunk = null;
        $this->data_length = null;
        $this->chain_id = null;
        $this->tx_type = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\EthereumSignTx) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->address_n = ($message->address_n !== null) ? $message->address_n : $this->address_n;
        $this->nonce = ($message->nonce !== null) ? $message->nonce : $this->nonce;
        $this->gas_price = ($message->gas_price !== null) ? $message->gas_price : $this->gas_price;
        $this->gas_limit = ($message->gas_limit !== null) ? $message->gas_limit : $this->gas_limit;
        $this->to = ($message->to !== null) ? $message->to : $this->to;
        $this->value = ($message->value !== null) ? $message->value : $this->value;
        $this->data_initial_chunk = ($message->data_initial_chunk !== null) ? $message->data_initial_chunk : $this->data_initial_chunk;
        $this->data_length = ($message->data_length !== null) ? $message->data_length : $this->data_length;
        $this->chain_id = ($message->chain_id !== null) ? $message->chain_id : $this->chain_id;
        $this->tx_type = ($message->tx_type !== null) ? $message->tx_type : $this->tx_type;
    }


}

