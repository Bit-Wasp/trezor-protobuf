<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : types.proto
 */


namespace BitWasp\TrezorProto;

/**
 * Protobuf message : BitWasp.TrezorProto.TxInputType
 */
class TxInputType extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * address_n repeated uint32 = 1
     *
     * @var \Protobuf\Collection
     */
    protected $address_n = null;

    /**
     * prev_hash required bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $prev_hash = null;

    /**
     * prev_index required uint32 = 3
     *
     * @var int
     */
    protected $prev_index = null;

    /**
     * script_sig optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $script_sig = null;

    /**
     * sequence optional uint32 = 5
     *
     * @var int
     */
    protected $sequence = null;

    /**
     * script_type optional enum = 6
     *
     * @var \BitWasp\TrezorProto\InputScriptType
     */
    protected $script_type = null;

    /**
     * multisig optional message = 7
     *
     * @var \BitWasp\TrezorProto\MultisigRedeemScriptType
     */
    protected $multisig = null;

    /**
     * amount optional uint64 = 8
     *
     * @var int
     */
    protected $amount = null;

    /**
     * decred_tree optional uint32 = 9
     *
     * @var int
     */
    protected $decred_tree = null;

    /**
     * decred_script_version optional uint32 = 10
     *
     * @var int
     */
    protected $decred_script_version = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->sequence = '4294967295';
        $this->script_type = \BitWasp\TrezorProto\InputScriptType::SPENDADDRESS();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'address_n' has a value
     *
     * @return bool
     */
    public function hasAddressNList()
    {
        return $this->address_n !== null;
    }

    /**
     * Get 'address_n' value
     *
     * @return \Protobuf\Collection
     */
    public function getAddressNList()
    {
        return $this->address_n;
    }

    /**
     * Set 'address_n' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAddressNList(\Protobuf\Collection $value = null)
    {
        $this->address_n = $value;
    }

    /**
     * Add a new element to 'address_n'
     *
     * @param int $value
     */
    public function addAddressN($value)
    {
        if ($this->address_n === null) {
            $this->address_n = new \Protobuf\ScalarCollection();
        }

        $this->address_n->add($value);
    }

    /**
     * Check if 'prev_hash' has a value
     *
     * @return bool
     */
    public function hasPrevHash()
    {
        return $this->prev_hash !== null;
    }

    /**
     * Get 'prev_hash' value
     *
     * @return \Protobuf\Stream
     */
    public function getPrevHash()
    {
        return $this->prev_hash;
    }

    /**
     * Set 'prev_hash' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPrevHash($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->prev_hash = $value;
    }

    /**
     * Check if 'prev_index' has a value
     *
     * @return bool
     */
    public function hasPrevIndex()
    {
        return $this->prev_index !== null;
    }

    /**
     * Get 'prev_index' value
     *
     * @return int
     */
    public function getPrevIndex()
    {
        return $this->prev_index;
    }

    /**
     * Set 'prev_index' value
     *
     * @param int $value
     */
    public function setPrevIndex($value)
    {
        $this->prev_index = $value;
    }

    /**
     * Check if 'script_sig' has a value
     *
     * @return bool
     */
    public function hasScriptSig()
    {
        return $this->script_sig !== null;
    }

    /**
     * Get 'script_sig' value
     *
     * @return \Protobuf\Stream
     */
    public function getScriptSig()
    {
        return $this->script_sig;
    }

    /**
     * Set 'script_sig' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setScriptSig($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->script_sig = $value;
    }

    /**
     * Check if 'sequence' has a value
     *
     * @return bool
     */
    public function hasSequence()
    {
        return $this->sequence !== null;
    }

    /**
     * Get 'sequence' value
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->sequence;
    }

    /**
     * Set 'sequence' value
     *
     * @param int $value
     */
    public function setSequence($value = null)
    {
        $this->sequence = $value;
    }

    /**
     * Check if 'script_type' has a value
     *
     * @return bool
     */
    public function hasScriptType()
    {
        return $this->script_type !== null;
    }

    /**
     * Get 'script_type' value
     *
     * @return \BitWasp\TrezorProto\InputScriptType
     */
    public function getScriptType()
    {
        return $this->script_type;
    }

    /**
     * Set 'script_type' value
     *
     * @param \BitWasp\TrezorProto\InputScriptType $value
     */
    public function setScriptType(\BitWasp\TrezorProto\InputScriptType $value = null)
    {
        $this->script_type = $value;
    }

    /**
     * Check if 'multisig' has a value
     *
     * @return bool
     */
    public function hasMultisig()
    {
        return $this->multisig !== null;
    }

    /**
     * Get 'multisig' value
     *
     * @return \BitWasp\TrezorProto\MultisigRedeemScriptType
     */
    public function getMultisig()
    {
        return $this->multisig;
    }

    /**
     * Set 'multisig' value
     *
     * @param \BitWasp\TrezorProto\MultisigRedeemScriptType $value
     */
    public function setMultisig(\BitWasp\TrezorProto\MultisigRedeemScriptType $value = null)
    {
        $this->multisig = $value;
    }

    /**
     * Check if 'amount' has a value
     *
     * @return bool
     */
    public function hasAmount()
    {
        return $this->amount !== null;
    }

    /**
     * Get 'amount' value
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Set 'amount' value
     *
     * @param int $value
     */
    public function setAmount($value = null)
    {
        $this->amount = $value;
    }

    /**
     * Check if 'decred_tree' has a value
     *
     * @return bool
     */
    public function hasDecredTree()
    {
        return $this->decred_tree !== null;
    }

    /**
     * Get 'decred_tree' value
     *
     * @return int
     */
    public function getDecredTree()
    {
        return $this->decred_tree;
    }

    /**
     * Set 'decred_tree' value
     *
     * @param int $value
     */
    public function setDecredTree($value = null)
    {
        $this->decred_tree = $value;
    }

    /**
     * Check if 'decred_script_version' has a value
     *
     * @return bool
     */
    public function hasDecredScriptVersion()
    {
        return $this->decred_script_version !== null;
    }

    /**
     * Get 'decred_script_version' value
     *
     * @return int
     */
    public function getDecredScriptVersion()
    {
        return $this->decred_script_version;
    }

    /**
     * Set 'decred_script_version' value
     *
     * @param int $value
     */
    public function setDecredScriptVersion($value = null)
    {
        $this->decred_script_version = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['prev_hash'])) {
            throw new \InvalidArgumentException('Field "prev_hash" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['prev_index'])) {
            throw new \InvalidArgumentException('Field "prev_index" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'address_n' => [],
            'script_sig' => null,
            'sequence' => '4294967295',
            'script_type' => \BitWasp\TrezorProto\InputScriptType::SPENDADDRESS(),
            'multisig' => null,
            'amount' => null,
            'decred_tree' => null,
            'decred_script_version' => null
        ], $values);

        $message->setPrevHash($values['prev_hash']);
        $message->setPrevIndex($values['prev_index']);
        $message->setScriptSig($values['script_sig']);
        $message->setSequence($values['sequence']);
        $message->setScriptType($values['script_type']);
        $message->setMultisig($values['multisig']);
        $message->setAmount($values['amount']);
        $message->setDecredTree($values['decred_tree']);
        $message->setDecredScriptVersion($values['decred_script_version']);

        foreach ($values['address_n'] as $item) {
            $message->addAddressN($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TxInputType',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'address_n',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'prev_hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'prev_index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'script_sig',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'sequence',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '4294967295'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'script_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.BitWasp.TrezorProto.InputScriptType',
                    'default_value' => \BitWasp\TrezorProto\InputScriptType::SPENDADDRESS()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'multisig',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.BitWasp.TrezorProto.MultisigRedeemScriptType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'amount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'decred_tree',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'decred_script_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->prev_hash === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\TxInputType#prev_hash" (tag 2) is required but has no value.');
        }

        if ($this->prev_index === null) {
            throw new \UnexpectedValueException('Field "\\BitWasp\\TrezorProto\\TxInputType#prev_index" (tag 3) is required but has no value.');
        }

        if ($this->address_n !== null) {
            foreach ($this->address_n as $val) {
                $writer->writeVarint($stream, 8);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->prev_hash !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->prev_hash);
        }

        if ($this->prev_index !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->prev_index);
        }

        if ($this->script_sig !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->script_sig);
        }

        if ($this->sequence !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->sequence);
        }

        if ($this->script_type !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->script_type->value());
        }

        if ($this->multisig !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->multisig->serializedSize($sizeContext));
            $this->multisig->writeTo($context);
        }

        if ($this->amount !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->amount);
        }

        if ($this->decred_tree !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->decred_tree);
        }

        if ($this->decred_script_version !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->decred_script_version);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->address_n === null) {
                    $this->address_n = new \Protobuf\ScalarCollection();
                }

                $this->address_n->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->prev_hash = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->prev_index = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->script_sig = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->sequence = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->script_type = \BitWasp\TrezorProto\InputScriptType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \BitWasp\TrezorProto\MultisigRedeemScriptType();

                $this->multisig = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->amount = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->decred_tree = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->decred_script_version = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->address_n !== null) {
            foreach ($this->address_n as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->prev_hash !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->prev_hash);
        }

        if ($this->prev_index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->prev_index);
        }

        if ($this->script_sig !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->script_sig);
        }

        if ($this->sequence !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sequence);
        }

        if ($this->script_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->script_type->value());
        }

        if ($this->multisig !== null) {
            $innerSize = $this->multisig->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->amount !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->amount);
        }

        if ($this->decred_tree !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->decred_tree);
        }

        if ($this->decred_script_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->decred_script_version);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->address_n = null;
        $this->prev_hash = null;
        $this->prev_index = null;
        $this->script_sig = null;
        $this->sequence = '4294967295';
        $this->script_type = \BitWasp\TrezorProto\InputScriptType::SPENDADDRESS();
        $this->multisig = null;
        $this->amount = null;
        $this->decred_tree = null;
        $this->decred_script_version = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \BitWasp\TrezorProto\TxInputType) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->address_n = ($message->address_n !== null) ? $message->address_n : $this->address_n;
        $this->prev_hash = ($message->prev_hash !== null) ? $message->prev_hash : $this->prev_hash;
        $this->prev_index = ($message->prev_index !== null) ? $message->prev_index : $this->prev_index;
        $this->script_sig = ($message->script_sig !== null) ? $message->script_sig : $this->script_sig;
        $this->sequence = ($message->sequence !== null) ? $message->sequence : $this->sequence;
        $this->script_type = ($message->script_type !== null) ? $message->script_type : $this->script_type;
        $this->multisig = ($message->multisig !== null) ? $message->multisig : $this->multisig;
        $this->amount = ($message->amount !== null) ? $message->amount : $this->amount;
        $this->decred_tree = ($message->decred_tree !== null) ? $message->decred_tree : $this->decred_tree;
        $this->decred_script_version = ($message->decred_script_version !== null) ? $message->decred_script_version : $this->decred_script_version;
    }


}

